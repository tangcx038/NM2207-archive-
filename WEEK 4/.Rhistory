# Read the CSV file and assign it to the variable "comm_data"
comm_data <- read.csv("CommQuest2023_Larger.csv")
comm_data
knitr::opts_chunk$set(echo = TRUE)
# Load Tidyverse
library(tidyverse)
# Read the CSV file and assign it to the variable "comm_data"
comm_data <- read.csv("CommQuest2023_Larger.csv")
comm_data
# Create a new dataframe with selected columns
new_df1<- comm_data%>% select(date,channel,message)
# Overview of new dataframe
glimpse(new_df1)
#Arrange the dataframe in ascending order based on the "date" column
arranged_data <- comm_data %>%arrange(date)
print(arranged_data)
#Use distinct() to find unique senders
unique_senders <- comm_data %>%distinct(sender)%>%select(sender)
print(unique_senders)
# Group by sender and count messages
summary_table <- comm_data %>%group_by(sender) %>%summarise(count = n())
print(summary_table)
#Another method just using count()
##summary_table2 <- comm_data %>%group_by(sender)%>%count(sender)
#Break down of each message and count
##summary_table2 <- comm_data %>%group_by(sender)%>%*count(message)*
# Group by channel and count messages
summary_table2 <- comm_data %>%group_by(channel) %>%summarise(count = n())
print(summary_table2)
#Another method
##summary_table2 <- comm_data %>%group_by(channel) %>%count(channel)
# Filter for positive sentiment scores
positive_data <- comm_data %>%
filter(sentiment> 0)
# Group by sender and calculate the average sentiment score
sender_avg_sentiment <- positive_data %>%
group_by(sender) %>%
summarise(avg_sentiment=mean(sentiment))
# Arrange senders in descending order of average sentiment score
top_senders <- sender_avg_sentiment %>%
arrange(desc(avg_sentiment))
# Select the top three senders
top_three_senders <- top_senders %>%
slice(1:3)
# Display the top three senders and their corresponding sentiment averages
print(top_three_senders)
# Group by date and calculate the average sentiment score for each day
daily_avg_sentiment <- comm_data %>%
group_by(date) %>%
summarise(avg_sentiment = mean(sentiment))
# Arrange the results in ascending order of date
daily_avg_sentiment <- daily_avg_sentiment %>%
arrange(date)
# Display the dataframe with daily average sentiment scores
print(daily_avg_sentiment)
#another method
##daily<-comm_data%>%group_by(date)%>%summarise(mean(sentiment))%>%arrange(date)
# Mutate to add a new column "sentiment_label" based on sentiment scores
comm_data<-comm_data %>% select(sentiment) %>% mutate(positive = as.logical(sentiment > 0), neutral = as.logical(sentiment == 0), negative = as.logical(sentiment < 0))
print(comm_data)
comm_data %>% select(sentiment) %>% mutate(sentiment_label = ifelse(as.logical(sentiment > 0), "Positive", ifelse(as.logical(sentiment < 0), "Negative", "Neutral")))
print(comm_data)
# Mutate to calculate the product of sentiment score and message length
new_dataframe <- comm_data %>%select(message,sentiment)%>%mutate(product_score_length = sentiment*nchar(message))
knitr::opts_chunk$set(echo = TRUE)
# Load Tidyverse
library(tidyverse)
# Read the CSV file and assign it to the variable "comm_data"
comm_data <- read.csv("CommQuest2023_Larger.csv")
comm_data
# Create a new dataframe with selected columns
new_df1<- comm_data%>% select(date,channel,message)
# Overview of new dataframe
glimpse(new_df1)
#Arrange the dataframe in ascending order based on the "date" column
arranged_data <- comm_data %>%arrange(date)
print(arranged_data)
#Use distinct() to find unique senders
unique_senders <- comm_data %>%distinct(sender)%>%select(sender)
print(unique_senders)
# Group by sender and count messages
summary_table <- comm_data %>%group_by(sender) %>%summarise(count = n())
print(summary_table)
#Another method just using count()
##summary_table2 <- comm_data %>%group_by(sender)%>%count(sender)
#Break down of each message and count
##summary_table2 <- comm_data %>%group_by(sender)%>%*count(message)*
# Group by channel and count messages
summary_table2 <- comm_data %>%group_by(channel) %>%summarise(count = n())
print(summary_table2)
#Another method
##summary_table2 <- comm_data %>%group_by(channel) %>%count(channel)
# Filter for positive sentiment scores
positive_data <- comm_data %>%
filter(sentiment> 0)
# Group by sender and calculate the average sentiment score
sender_avg_sentiment <- positive_data %>%
group_by(sender) %>%
summarise(avg_sentiment=mean(sentiment))
# Arrange senders in descending order of average sentiment score
top_senders <- sender_avg_sentiment %>%
arrange(desc(avg_sentiment))
# Select the top three senders
top_three_senders <- top_senders %>%
slice(1:3)
# Display the top three senders and their corresponding sentiment averages
print(top_three_senders)
# Group by date and calculate the average sentiment score for each day
daily_avg_sentiment <- comm_data %>%
group_by(date) %>%
summarise(avg_sentiment = mean(sentiment))
# Arrange the results in ascending order of date
daily_avg_sentiment <- daily_avg_sentiment %>%
arrange(date)
# Display the dataframe with daily average sentiment scores
print(daily_avg_sentiment)
#another method
##daily<-comm_data%>%group_by(date)%>%summarise(mean(sentiment))%>%arrange(date)
# Mutate to add a new column "sentiment_label" based on sentiment scores
comm_data<-comm_data %>% select(sentiment) %>% mutate(positive = as.logical(sentiment > 0), neutral = as.logical(sentiment == 0), negative = as.logical(sentiment < 0))
print(comm_data)
comm_data %>% select(sentiment) %>% mutate(sentiment_label = ifelse(as.logical(sentiment > 0), "Positive", ifelse(as.logical(sentiment < 0), "Negative", "Neutral")))
print(comm_data)
# Mutate to calculate the product of sentiment score and message length
new_dataframe <- comm_data %>%select(message,sentiment)%>%mutate(product_score_length = sentiment*nchar(message))
# Mutate to calculate the product of sentiment score and message length
comm_data %>% mutate(product_score_length = sentiment*nchar(message)) %>% arrange(desc(product_score_length))
# Mutate to calculate the product of sentiment score and message length
comm_data %>% mutate(a = sentiment*nchar(message)) %>% arrange(desc(a))
# Mutate to calculate the product of sentiment score and message length
comm_data %>% mutate(a = sentiment*nchar(message))
# Mutate to calculate the product of sentiment score and message length
message
comm_data %>% mutate(a = sentiment*nchar(message)) %>% arrange(desc(a))
# Mutate to calculate the product of sentiment score and message length
mutate(a = sentiment*nchar(message)) %>% arrange(desc(a))
# Mutate to calculate the product of sentiment score and message length
mutate(a = nchar(message)) %>% arrange(desc(a))
# Mutate to calculate the product of sentiment score and message length
mutate(a = nchar(message)) %>% arrange(desc(a))
# Mutate to calculate the product of sentiment score and message length
mutate(a = nchar(message)) %>% arrange(desc(a))
knitr::opts_chunk$set(echo = TRUE)
# Load Tidyverse
library(tidyverse)
# Read the CSV file and assign it to the variable "comm_data"
comm_data <- read.csv("CommQuest2023_Larger.csv")
comm_data
# Create a new dataframe with selected columns
new_df1<- comm_data%>% select(date,channel,message)
# Overview of new dataframe
glimpse(new_df1)
#Arrange the dataframe in ascending order based on the "date" column
arranged_data <- comm_data %>%arrange(date)
print(arranged_data)
#Use distinct() to find unique senders
unique_senders <- comm_data %>%distinct(sender)%>%select(sender)
print(unique_senders)
# Group by sender and count messages
summary_table <- comm_data %>%group_by(sender) %>%summarise(count = n())
print(summary_table)
#Another method just using count()
##summary_table2 <- comm_data %>%group_by(sender)%>%count(sender)
#Break down of each message and count
##summary_table2 <- comm_data %>%group_by(sender)%>%*count(message)*
# Group by channel and count messages
summary_table2 <- comm_data %>%group_by(channel) %>%summarise(count = n())
print(summary_table2)
#Another method
##summary_table2 <- comm_data %>%group_by(channel) %>%count(channel)
# Filter for positive sentiment scores
positive_data <- comm_data %>%
filter(sentiment> 0)
# Group by sender and calculate the average sentiment score
sender_avg_sentiment <- positive_data %>%
group_by(sender) %>%
summarise(avg_sentiment=mean(sentiment))
# Arrange senders in descending order of average sentiment score
top_senders <- sender_avg_sentiment %>%
arrange(desc(avg_sentiment))
# Select the top three senders
top_three_senders <- top_senders %>%
slice(1:3)
# Display the top three senders and their corresponding sentiment averages
print(top_three_senders)
# Group by date and calculate the average sentiment score for each day
daily_avg_sentiment <- comm_data %>%
group_by(date) %>%
summarise(avg_sentiment = mean(sentiment))
# Arrange the results in ascending order of date
daily_avg_sentiment <- daily_avg_sentiment %>%
arrange(date)
# Display the dataframe with daily average sentiment scores
print(daily_avg_sentiment)
#another method
##daily<-comm_data%>%group_by(date)%>%summarise(mean(sentiment))%>%arrange(date)
# Mutate to add a new column "sentiment_label" based on sentiment scores
comm_data<-comm_data %>% select(sentiment) %>% mutate(positive = as.logical(sentiment > 0), neutral = as.logical(sentiment == 0), negative = as.logical(sentiment < 0))
print(comm_data)
comm_data %>% select(sentiment) %>% mutate(sentiment_label = ifelse(as.logical(sentiment > 0), "Positive", ifelse(as.logical(sentiment < 0), "Negative", "Neutral")))
print(comm_data)
knitr::opts_chunk$set(echo = TRUE)
# Load Tidyverse
library(tidyverse)
# Read the CSV file and assign it to the variable "comm_data"
comm_data <- read.csv("CommQuest2023_Larger.csv")
comm_data
# Create a new dataframe with selected columns
new_df1<- comm_data%>% select(date,channel,message)
# Overview of new dataframe
glimpse(new_df1)
#Arrange the dataframe in ascending order based on the "date" column
arranged_data <- comm_data %>%arrange(date)
print(arranged_data)
#Use distinct() to find unique senders
unique_senders <- comm_data %>%distinct(sender)%>%select(sender)
print(unique_senders)
# Group by sender and count messages
summary_table <- comm_data %>%group_by(sender) %>%summarise(count = n())
print(summary_table)
#Another method just using count()
##summary_table2 <- comm_data %>%group_by(sender)%>%count(sender)
#Break down of each message and count
##summary_table2 <- comm_data %>%group_by(sender)%>%*count(message)*
# Group by channel and count messages
summary_table2 <- comm_data %>%group_by(channel) %>%summarise(count = n())
print(summary_table2)
#Another method
##summary_table2 <- comm_data %>%group_by(channel) %>%count(channel)
# Filter for positive sentiment scores
positive_data <- comm_data %>%
filter(sentiment> 0)
# Group by sender and calculate the average sentiment score
sender_avg_sentiment <- positive_data %>%
group_by(sender) %>%
summarise(avg_sentiment=mean(sentiment))
# Arrange senders in descending order of average sentiment score
top_senders <- sender_avg_sentiment %>%
arrange(desc(avg_sentiment))
# Select the top three senders
top_three_senders <- top_senders %>%
slice(1:3)
# Display the top three senders and their corresponding sentiment averages
print(top_three_senders)
# Group by date and calculate the average sentiment score for each day
daily_avg_sentiment <- comm_data %>%
group_by(date) %>%
summarise(avg_sentiment = mean(sentiment))
# Arrange the results in ascending order of date
daily_avg_sentiment <- daily_avg_sentiment %>%
arrange(date)
# Display the dataframe with daily average sentiment scores
print(daily_avg_sentiment)
#another method
##daily<-comm_data%>%group_by(date)%>%summarise(mean(sentiment))%>%arrange(date)
# Mutate to add a new column "sentiment_label" based on sentiment scores
comm_data<-comm_data %>% select(sentiment) %>% mutate(positive = as.logical(sentiment > 0), neutral = as.logical(sentiment == 0), negative = as.logical(sentiment < 0))
print(comm_data)
comm_data %>% select(sentiment) %>% mutate(sentiment_label = ifelse(as.logical(sentiment > 0), "Positive", ifelse(as.logical(sentiment < 0), "Negative", "Neutral")))
print(comm_data)
#SHINY ERROR, INTRA ERROR, UNABLE TO RESOLVE
comm_data %>% mutate(a = sentiment*nchar(message()))%>%arrange(desc(a))
#SHINY ERROR, INTRA ERROR, UNABLE TO RESOLVE
comm_data %>% mutate(a = nchar(message()))%>%arrange(desc(a))
#SHINY ERROR, INTRA ERROR, UNABLE TO RESOLVE
message()
#comm_data %>% mutate(a = sentiment*nchar(message()))%>%arrange(desc(a))
#SHINY ERROR, INTRA ERROR, UNABLE TO RESOLVE
#comm_data %>% mutate(a = sentiment*nchar(message%>%arrange(desc(a))
message
#SHINY ERROR, INTRA ERROR, UNABLE TO RESOLVE
#comm_data %>% mutate(a = sentiment*nchar(message%>%arrange(desc(a))
comm_data
#SHINY ERROR, INTRA ERROR, UNABLE TO RESOLVE
comm_data_org %>% mutate(a = sentiment*nchar(message%>%arrange(desc(a))
knitr::opts_chunk$set(echo = TRUE)
# Load Tidyverse
library(tidyverse)
# Read the CSV file and assign it to the variable "comm_data"
comm_data <- read.csv("CommQuest2023_Larger.csv")
comm_data_org <- read.csv("CommQuest2023_Larger.csv")
# Create a new dataframe with selected columns
new_df1<- comm_data%>% select(date,channel,message)
# Overview of new dataframe
glimpse(new_df1)
#Arrange the dataframe in ascending order based on the "date" column
arranged_data <- comm_data %>%arrange(date)
print(arranged_data)
#Use distinct() to find unique senders
unique_senders <- comm_data %>%distinct(sender)%>%select(sender)
print(unique_senders)
# Group by sender and count messages
summary_table <- comm_data %>%group_by(sender) %>%summarise(count = n())
print(summary_table)
#Another method just using count()
##summary_table2 <- comm_data %>%group_by(sender)%>%count(sender)
#Break down of each message and count
##summary_table2 <- comm_data %>%group_by(sender)%>%*count(message)*
# Group by channel and count messages
summary_table2 <- comm_data %>%group_by(channel) %>%summarise(count = n())
print(summary_table2)
#Another method
##summary_table2 <- comm_data %>%group_by(channel) %>%count(channel)
# Filter for positive sentiment scores
positive_data <- comm_data %>%
filter(sentiment> 0)
# Group by sender and calculate the average sentiment score
sender_avg_sentiment <- positive_data %>%
group_by(sender) %>%
summarise(avg_sentiment=mean(sentiment))
# Arrange senders in descending order of average sentiment score
top_senders <- sender_avg_sentiment %>%
arrange(desc(avg_sentiment))
# Select the top three senders
top_three_senders <- top_senders %>%
slice(1:3)
# Display the top three senders and their corresponding sentiment averages
print(top_three_senders)
# Group by date and calculate the average sentiment score for each day
daily_avg_sentiment <- comm_data %>%
group_by(date) %>%
summarise(avg_sentiment = mean(sentiment))
# Arrange the results in ascending order of date
daily_avg_sentiment <- daily_avg_sentiment %>%
arrange(date)
# Display the dataframe with daily average sentiment scores
print(daily_avg_sentiment)
#another method
##daily<-comm_data%>%group_by(date)%>%summarise(mean(sentiment))%>%arrange(date)
# Mutate to add a new column "sentiment_label" based on sentiment scores
comm_data<-comm_data %>% select(sentiment) %>% mutate(positive = as.logical(sentiment > 0), neutral = as.logical(sentiment == 0), negative = as.logical(sentiment < 0))
print(comm_data)
comm_data %>% select(sentiment) %>% mutate(sentiment_label = ifelse(as.logical(sentiment > 0), "Positive", ifelse(as.logical(sentiment < 0), "Negative", "Neutral")))
print(comm_data)
#SHINY ERROR, INTRA ERROR, UNABLE TO RESOLVE
comm_data_org %>% mutate(a = sentiment*nchar(message%>%arrange(desc(a))
#SHINY ERROR, INTRA ERROR, UNABLE TO RESOLVE
comm_data %>% mutate(a = sentiment*nchar(comm_data_org$message%>%arrange(desc(a))
#SHINY ERROR, INTRA ERROR, UNABLE TO RESOLVE
comm_data %>% mutate(a = sentiment*nchar(comm_data_org$message)%>%arrange(desc(a))
#SHINY ERROR, INTRA ERROR, UNABLE TO RESOLVE
comm_data %>% mutate(a = sentiment*nchar(comm_data_org$message))%>%arrange(desc(a))

