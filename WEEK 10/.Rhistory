install.packages("magick")
library(magick)
image_read(week5q5)
image_read(week5q5.jpg)
image_attributes(week5q5)
image_attributes(week5q5.jpg)
meme_jpg <- image_convert(meme, "jpg")
image_write(meme, path = "week5q5.jpg", format = "jpg")
image_write(week5q5, path = "week5q5.jpg", format = "jpg")
gptstudio:::addin_chatgpt()
api key
gptstudio:::addin_chatgpt()
# install.packages("pak")
pak::pak("JamesHWade/gpttools")
install.packages("gptstudio")
install_github("MichelNivard/gptstudio")
install.packages("devtools")
require(usethis)
edit_r_environ()
Sys.setenv(OPENAI_API_KEY = "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")
gptstudio:::addin_chatgpt()
gptstudio:::addin_chatgpt()
gptstudio:::addin_chatgpt()
require(usethis)
edit_r_environ()
library(shiny)
# Define a function to reverse a word
reverse_word <- function(word) {
reversed <- ""
i <- nchar(word)
while (i > 0) {
char <- substr(word, i, i)  # Get the character at position i
reversed <- paste0(reversed, char)  # Append the character to the reversed word
i <- i - 1
}
return(reversed)
}
# Define the user interface
ui <- fluidPage(
textInput("word", "Enter a word:"),
textOutput("reversed_word")
)
# Define the user interface
ui <- fluidPage(
textInput("word", "Enter a word:"),
textOutput("reversed_word")
)
# Define the server logic
server <- function(input, output, session) {
# Reactively reverse the word when the user enters it
reversed_word <- reactive({
word <- input$word
if (!is.null(word)) {
return(reverse_word(word))
} else {
return(NULL)
}
})
# Display the reversed word
output$reversed_word <- renderText({
reversed <- reversed_word()
if (!is.null(reversed)) {
paste("Reversed word:", reversed)
} else {
""
}
})
}
# Create the Shiny app
shinyApp(ui, server)
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
knitr::opts_chunk$set(echo = TRUE)
# Install package
#install.packages("shiny")
# Load package
library(shiny)
# Run an example from the library
#runExample("01_hello")
library(shiny)
# Define UI for app that draws a histogram
ui <- fluidPage(
# App title
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions
sidebarLayout(
# Sidebar panel for inputs
sidebarPanel(
# Input: Slider for the number of bins
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)),
# Main panel for displaying outputs
mainPanel(
# Output: Histogram
plotOutput(outputId = "distPlot"))))
library(shiny)
# Define UI for app that draws a histogram
ui <- fluidPage(
# App title
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions
sidebarLayout(
# Sidebar panel for inputs
sidebarPanel(
# Input: Slider for the number of bins
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)),
# Main panel for displaying outputs
mainPanel(
# Output: Histogram
plotOutput(outputId = "distPlot"))))
knitr::opts_chunk$set(echo = TRUE)
# Install package
#install.packages("shiny")
# Load package
library(shiny)
# Run an example from the library
#runExample("01_hello")
library(shiny)
runApp("App-1")
chatgpt:::run_addin_ask_chatgpt()
clean_waste_03_22 <- energy_saved %>%
rename(
waste_type = "waste_type",
total_waste_generated_tonne = "total_generate_1k_tonnes",
total_waste_recycled_tonne = "total_recycled_1k_tonnes",
year = "year"
) %>%
mutate(
total_waste_generated_tonne = total_waste_generated_tonne * 1000,
total_waste_recycled_tonne = total_waste_recycled_tonne * 1000
)
waste_03_22 <- read.csv('2003_2022_waste.csv')
setwd("~/GitHub/NM2207_CHING/WEEK 10")
waste_03_22 <- read.csv('2003_2022_waste.csv')
energy_saved <- read.csv('waste_energy_stat.csv')
# Renaming columns and mutating the data to convert values from kilotonnes to tonnes
clean_waste_03_22 <- energy_saved %>%
rename(
waste_type = "waste_type",
total_waste_generated_tonne = "total_generate_1k_tonnes",
total_waste_recycled_tonne = "total_recycled_1k_tonnes",
year = "year"
) %>%
mutate(
total_waste_generated_tonne = total_waste_generated_tonne * 1000,
total_waste_recycled_tonne = total_waste_recycled_tonne * 1000
)
clean_waste_03_22 <- waste_03_22 %>%
rename(
waste_type = "waste_type",
total_waste_generated_tonne = "total_generate_1k_tonnes",
total_waste_recycled_tonne = "total_recycled_1k_tonnes",
year = "year"
) %>%
mutate(
total_waste_generated_tonne = total_waste_generated_tonne * 1000,
total_waste_recycled_tonne = total_waste_recycled_tonne * 1000
)
knitr::opts_chunk$set(echo = TRUE)
clean_waste_03_22 <- waste_03_22 %>%
rename(
waste_type = "waste_type",
total_waste_generated_tonne = "total_generate_1k_tonnes",
total_waste_recycled_tonne = "total_recycled_1k_tonnes",
year = "year"
) %>%
mutate(
total_waste_generated_tonne = total_waste_generated_tonne * 1000,
total_waste_recycled_tonne = total_waste_recycled_tonne * 1000
)
fig
clean_waste_03_22 <- energy_saved %>%
rename(
waste_type = "waste_type",
total_waste_generated_tonne = "total_generate_1k_tonnes",
total_waste_recycled_tonne = "total_recycled_1k_tonnes",
year = "year"
) %>%
mutate(
total_waste_generated_tonne = total_waste_generated_tonne * 1000,
total_waste_recycled_tonne = total_waste_recycled_tonne * 1000
)
knitr::opts_chunk$set(echo = TRUE)
clean_waste_03_22 <- energy_saved %>%
rename(
waste_type = "waste_type",
total_waste_generated_tonne = "total_generate_1k_tonnes",
total_waste_recycled_tonne = "total_recycled_1k_tonnes",
year = "year"
)
install.packages("dplyr")
library(dplyr)
clean_waste_03_22 <- energy_saved %>%
rename(
waste_type = "waste_type",
total_waste_generated_tonne = "total_generate_1k_tonnes",
total_waste_recycled_tonne = "total_recycled_1k_tonnes",
year = "year"
) %>%
mutate(
total_waste_generated_tonne = total_waste_generated_tonne * 1000,
total_waste_recycled_tonne = total_waste_recycled_tonne * 1000
)
clean_waste_03_22 <- energy_saved %>%
rename(
waste_type = "waste.type",
total_waste_generated_tonne = "total_generate_1k_tonnes",
total_waste_recycled_tonne = "total_recycled_1k_tonnes",
year = "year"
) %>%
mutate(
total_waste_generated_tonne = total_waste_generated_tonne * 1000,
total_waste_recycled_tonne = total_waste_recycled_tonne * 1000
)
waste_03_22 <- read.csv('2003_2022_waste.csv')
energy_saved <- read.csv('waste_energy_stat.csv')
# Renaming columns and mutating the data to convert values from kilotonnes to tonnes
clean_waste_03_22 <- energy_saved %>%
rename(
waste_type = "waste_type",
total_waste_generated_tonne = "total_generate_1k_tonnes",
total_waste_recycled_tonne = "total_recycled_1k_tonnes",
year = "year"
) %>%
mutate(
total_waste_generated_tonne = total_waste_generated_tonne * 1000,
total_waste_recycled_tonne = total_waste_recycled_tonne * 1000
)
clean_waste_03_22 <- waste_03_22 %>%
rename(
waste_type = "waste_type",
total_waste_generated_tonne = "total_generate_1k_tonnes",
total_waste_recycled_tonne = "total_recycled_1k_tonnes",
year = "year"
) %>%
mutate(
total_waste_generated_tonne = total_waste_generated_tonne * 1000,
total_waste_recycled_tonne = total_waste_recycled_tonne * 1000
)
wasteselected <- clean_waste_03_22 %>%
filter(year %in% 2003:2022,
waste_type %in% c("Plastics", "Ferrous Metals", "Non-Ferrous Metals", "Glass", "Food"))%>%
arrange(waste_type)
clean_waste_03_22$recycling_rate <- round(
clean_waste_03_22$total_waste_recycled_tonne / clean_waste_03_22$total_waste_generated_tonne,
2
)
# Display the cleaned data
clean_waste_03_22
overall <- data %>%
filter(waste_type %in% c("Overall", "Total"))
# Create a bar plot for Waste Generated and Waste Recycled
fig <- plot_ly() %>%
add_trace(
type = "bar",
x = ~overall$year,
y = ~overall$total_waste_generated_tonne,
name = "Waste Generated"
) %>%
add_trace(
type = "bar",
x = ~overall$year,
y = ~overall$total_waste_recycled_tonne,
name = "Waste Recycled"
)
overall <- wasteselected %>%
filter(waste_type %in% c("Overall", "Total"))
overall
energy_saved
energy_saved
energy_saved <- read.csv('waste_energy_stat.csv')
energy_saved
fig <- plot_ly() %>%
add_trace(
type = "bar",
x = ~overall$year,
y = ~overall$total_waste_generated_tonne,
name = "Waste Generated"
) %>%
add_trace(
type = "bar",
x = ~overall$year,
y = ~overall$total_waste_recycled_tonne,
name = "Waste Recycled"
)
fig <- plot_ly() %>%
add(
type = "bar",
x = ~overall$year,
y = ~overall$total_waste_generated_tonne,
name = "Waste Generated"
) %>%
add_trace(
type = "bar",
x = ~overall$year,
y = ~overall$total_waste_recycled_tonne,
name = "Waste Recycled"
)
fig <- plot_ly() %>%
add(
type = "bar",
x = ~overall$year,
y = ~overall$total_waste_generated_tonne,
name = "Waste Generated"
) %>%
add(
type = "bar",
x = ~overall$year,
y = ~overall$total_waste_recycled_tonne,
name = "Waste Recycled"
)
library(plotly)
# Create a bar plot using plot_ly
fig <- plot_ly(
type = "bar",
x = ~overall$year,
y = ~overall$total_waste_generated_tonne,
name = "Waste Generated"
) %>%
add_trace(
type = "bar",
x = ~overall$year,
y = ~overall$total_waste_recycled_tonne,
name = "Waste Recycled"
)
fig
fig <- plot_ly(
x = ~overall$year,
y = ~overall$total_waste_generated_tonne,
type = "bar",
name = "Waste Generated"
) %>%
add_trace(
x = ~overall$year,
y = ~overall$total_waste_recycled_tonne,
type = "bar",
name = "Waste Recycled"
)
fig
# Merge data with clean_energy_saved
total_data <- merge(data, clean_energy_saved, by.x = "waste_type", by.y = "material", all.x = TRUE, all.y = FALSE)
```{r}
total_data <- merge(data, clean_energy_saved, by.x = "waste_type", by.y = "material", all.x = TRUE, all.y = FALSE)
