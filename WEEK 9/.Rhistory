install.packages("magick")
library(magick)
image_read(week5q5)
image_read(week5q5.jpg)
image_attributes(week5q5)
image_attributes(week5q5.jpg)
meme_jpg <- image_convert(meme, "jpg")
image_write(meme, path = "week5q5.jpg", format = "jpg")
image_write(week5q5, path = "week5q5.jpg", format = "jpg")
library(shiny)
# Define a function to reverse a word
reverse_word <- function(word) {
reversed <- ""
i <- nchar(word)
while (i > 0) {
char <- substr(word, i, i)  # Get the character at position i
reversed <- paste0(reversed, char)  # Append the character to the reversed word
i <- i - 1
}
return(reversed)
}
# Define the user interface
ui <- fluidPage(
textInput("word", "Enter a word:"),
textOutput("reversed_word")
)
# Define the user interface
ui <- fluidPage(
textInput("word", "Enter a word:"),
textOutput("reversed_word")
)
# Define the server logic
server <- function(input, output, session) {
# Reactively reverse the word when the user enters it
reversed_word <- reactive({
word <- input$word
if (!is.null(word)) {
return(reverse_word(word))
} else {
return(NULL)
}
})
# Display the reversed word
output$reversed_word <- renderText({
reversed <- reversed_word()
if (!is.null(reversed)) {
paste("Reversed word:", reversed)
} else {
""
}
})
}
# Create the Shiny app
shinyApp(ui, server)
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
knitr::opts_chunk$set(echo = TRUE)
# Install package
#install.packages("shiny")
# Load package
library(shiny)
# Run an example from the library
#runExample("01_hello")
library(shiny)
# Define UI for app that draws a histogram
ui <- fluidPage(
# App title
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions
sidebarLayout(
# Sidebar panel for inputs
sidebarPanel(
# Input: Slider for the number of bins
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)),
# Main panel for displaying outputs
mainPanel(
# Output: Histogram
plotOutput(outputId = "distPlot"))))
library(shiny)
# Define UI for app that draws a histogram
ui <- fluidPage(
# App title
titlePanel("Hello Shiny!"),
# Sidebar layout with input and output definitions
sidebarLayout(
# Sidebar panel for inputs
sidebarPanel(
# Input: Slider for the number of bins
sliderInput(inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30)),
# Main panel for displaying outputs
mainPanel(
# Output: Histogram
plotOutput(outputId = "distPlot"))))
knitr::opts_chunk$set(echo = TRUE)
# Install package
#install.packages("shiny")
# Load package
library(shiny)
# Run an example from the library
#runExample("01_hello")
library(shiny)
runApp("App-1")
setwd("~/NM2207/WEEK 9")
library(tidyverse)
# Create a tidy data frame using the tribble function
tidydata <- tribble(
~country, ~year, ~cases, ~population,
"Afghanistan", 1999, 745, 19987071,
"Afghanistan", 2000, 2666, 20595360,
"Brazil", 1999, 37737, 172006362,
"Brazil", 2000, 80488, 174504898,
"China", 1999, 212258, 1272915272,
"China", 2000, 213766, 1280428583
)
# Display the tidy data frame
tidydata
library(tidyverse)
billboard
billboard_long <- billboard %>%
pivot_longer(cols = starts_with("wk"), names_to = "week", values_to = "rank", values_drop_na = TRUE) %>%
mutate(week = parse_number(week))
View(billboard_long)
billboard_long <- billboard %>%
pivot_longer(cols = starts_with("wk"), names_to = "week", values_to = "rank", values_drop_na = TRUE)
View(billboard_long)
View(billboard_long)
View(billboard_long)
View(billboard_long)
View(billboard_long)
billboard_long <- billboard %>%
pivot_longer(cols = starts_with("wk"), names_to = "week", values_to = "rank", values_drop_na = TRUE) %>%
mutate(week = parse_number(week))
view(billboard_long)
library(tidyverse)
# Load the billboard dataset
billboard
# Pivot longer to arrange the rank values under new columns "week" and "rank"
billboard_long <- billboard %>%
pivot_longer(cols = starts_with("wk"),
names_to = "week",
values_to = "rank",
# Remove observations with the entries "NA"
values_drop_na = TRUE) %>%
# To only have numbers in the column "week"
mutate(week = parse_number(week))
# Plot the rank along the y-axis and week along the x-axis
ggplot(billboard_long, aes(x = week, y = rank)) +
geom_line() +
labs(x = "Week", y = "Rank")
cms_patient_experience
# Load the cms_patient_experience dataset
cms_patient_experience
# Pivot wider to create columns "measure_cd"
# Values in the columns correspond to "column prf_rate"
# Use id_cols to specify the columns identifying each row
cms_wide <- cms_patient_experience %>%
pivot_wider(names_from = measure_cd, values_from = prf_rate, id_cols = starts_with("org"))
cms_wide
View(cms_wide)
View(cms_wide)
cms_patient_experience
# Pivot wider to create columns "measure_cd"
# Values in the columns correspond to "column prf_rate"
# Use id_cols to specify the columns identifying each row
cms_wide <- cms_patient_experience %>%
pivot_wider(names_from = measure_cd, values_from = prf_rate)
cms_wide
View(cms_wide)
View(cms_wide)
cms_patient_experience
# Pivot wider to create columns "measure_cd"
# Values in the columns correspond to "column prf_rate"
# Use id_cols to specify the columns identifying each row
cms_wide <- cms_patient_experience %>%
pivot_wider(names_from = measure_cd, values_from = prf_rate, id_cols = starts_with("org"))
cms_wide
# Pivot wider to create columns "measure_cd"
# Values in the columns correspond to "column prf_rate"
# Use id_cols to specify the columns identifying each row
cms_wide <- cms_patient_experience %>%
pivot_wider(names_from = measure_cd, values_from = prf_rate, id_cols = starts_with("org"))
cms_wide
cms_patient_experience
# Pivot wider to create columns "measure_cd"
# Values in the columns correspond to "column prf_rate"
# Use id_cols to specify the columns identifying each row
cms_wide2 <- cms_patient_experience %>%
pivot_wider(names_from = measure_cd, values_from = prf_rate, id_cols = starts_with("org"))
cms_wide2
tidieddata <- nontidydata %>%
separate(rate, into = c("cases",
"population"),
sep = "/")
nontidydata
