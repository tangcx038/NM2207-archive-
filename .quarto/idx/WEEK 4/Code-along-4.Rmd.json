{"title":"Week-4: Code-along","markdown":{"yaml":{"title":"Week-4: Code-along","author":"Tang Ching Xian","date":"31-08-2023","output":{"html_document":null,"df_print":"paged"},"pdf_document":"default"},"headingText":"II. Code to edit and execute using the Code-along.Rmd file","containsRefs":false,"markdown":"\n\n  ```{r setup, include=TRUE}\nknitr::opts_chunk$set(echo = TRUE)\n```\n\n<br>\n\n## A. Data Wrangling\n<br>\n\n### 1. Loading packages (Slide #16)\n\n```{r, eval=TRUE,echo=TRUE}\n# Load package tidyverse\nlibrary(tidyverse)\n```\n\n### 2. Loading data-set (Slide #16)\n\n```{r, eval=TRUE,echo=FALSE}\n# Read data from the hotels.csv file and assign it to a variable named, \"hotels\"\nread.csv(\"hotels.csv\")\nhotels <- read_csv(\"hotels.csv\")\n```\n\n### 3. List names of the variables in the data-set (Slide #19)\n\n```{r, eval=TRUE,echo=TRUE}\nnames(hotels)\n```\n\n\n### 4. Glimpse of contents of the data-set (Slide #20)\n\n```{r, eval=TRUE,echo=TRUE}\nglimpse(hotels)\n```\n<br>\n\n## B. Choosing rows or columns\n<br>\n\n### 5. Select a single column (Slide #24)\n\n```{r, eval=TRUE,echo=TRUE}\n# View only lead_time (number of days between booking and arrival)\nselect(hotels, lead_time)\n```\n\n### 6. Select multiple columns (Slide #25)\n\n```{r, eval=TRUE,echo=TRUE}\n# View lead_time, agent and market_segment\nselect(hotels, lead_time,agent,market_segment)\n```\n\n### 7. Arrange entries of a column (Slide #28)\n\n```{r, eval=TRUE,echo=TRUE}\n# Rearranged entries of lead_time\narrange(hotels, lead_time)\n```\n\n### 8. Arrange entries of a column in the descending order (Slide #30)\n\n```{r, eval=TRUE,echo=TRUE}\n#Rearrange entries in the descending order\narrange(hotels, desc(lead_time))\n```\n\n### 9. Select columns and arrange the entries of a column (Slide #31)\n\n```{r, eval=TRUE,echo=TRUE}\narrange(\nselect(hotels, lead_time),\ndesc(lead_time)\n)\n\n```\n\n### 10. Select columns and arrange the entries of a column using the pipe operator (Slide #37)\n\n```{r, eval=TRUE,echo=TRUE}\nhotels %>%\nselect(lead_time) %>%\narrange(desc(lead_time))\n```\n\n### 11. Pick rows matching a condition (Slide #44)\n\n```{r, eval=TRUE,echo=TRUE}\nhotels %>%\nfilter(children >= 1) %>%\nselect(hotel, children)\n\n```\n\n### 12. Pick rows matching multiple conditions (Slide #46)\n\n```{r, eval=TRUE,echo=TRUE}\nhotels %>%\nfilter(children >= 1, hotel==\"City Hotel\") %>%\nselect(hotel, children)\n\n```\n\n### 13. Non-conditional selection of rows: sequence of indices (Slide #49)\n\n```{r, eval=TRUE,echo=TRUE}\nhotels %>% slice(1:5)\n```\n\n### 14. Non-conditional selection of rows: non-consecutive/specific indices (Slide #50)\n\n```{r, eval=TRUE,echo=TRUE}\nhotels %>% slice(1,3,5)\n```\n\n### 15. Pick unique rows using distinct() (Slide #52)\n\n```{r, eval=TRUE,echo=TRUE}\nhotels %>% distinct(hotel)\n```\n<br>\n\n## C. Creating new columns\n<br>\n\n### 16. Creating a single column with mutate() (Slide #56)\n\n```{r, eval=TRUE,echo=TRUE}\nhotels %>%\nmutate(little_ones = children + babies) %>%\nselect(hotel, little_ones,children,babies)\n```\n\n### 17. Creating multiple columns with mutate() (Slide #58)\n\n```{r, eval=TRUE,echo=TRUE}\nhotels %>%\nmutate(little_ones = children + babies, \naverage_little_ones = mean(little_ones)) %>% \nselect(hotel, little_ones,children,babies)\n\n```\n<br>\n\n## D. More operations with examples\n<br>\n\n### 18. count() to get frequencies (Slide #60)\n\n```{r, eval=TRUE,echo=TRUE}\nhotels %>%\ncount(market_segment)\n```\n\n### 19. count() to get frequencies with sorting of count (Slide #61)\n\n```{r, eval=TRUE,echo=TRUE}\n\nhotels %>%\ncount(market_segment, sort = TRUE)\n```\n\n### 20. count() multiple variables (Slide #62)\n\n```{r, eval=TRUE,echo=TRUE}\nhotels %>%\ncount(hotel, market_segment)\n```\n\n### 21. summarise() for summary statistics (Slide #63)\n\n```{r, eval=TRUE,echo=TRUE}\n# mean average daily rate for all bookings\nhotels %>%\nsummarise(mean_adr = mean(adr))\n\n```\n\n### 22. summarise() by using group_by to find mean (Slide #64)\n\n```{r, eval=TRUE,echo=TRUE}\n# mean average daily rate for all booking at city and resort hotels\nhotels %>%\ngroup_by(hotel) %>%\nsummarise(mean_adr = mean(adr))\n```\n\n### 23. summarise() by using group_by to get count (Slide #65)\n\n```{r, eval=TRUE,echo=TRUE}\n# Count of bookings at city and resort hotels\nhotels %>%\ngroup_by(hotel) %>%\nsummarise(count = n())\n```\n\n### 24. summarise() for multiple summary statistics (Slide #67)\n\n```{r, eval=TRUE,echo=TRUE}\nhotels %>%\nsummarise(\nmin_adr = min(adr),\nmean_adr = mean(adr),\nmedian_adr = median(adr),\nmax_adr = max(adr)\n)\n```\n\n### 25. select(), slice() and arrange() (Slide #68)\n\n```{r, eval=TRUE,echo=TRUE}\nhotels %>%\nselect(hotel, lead_time) %>%\nslice(1:5) %>%\narrange(lead_time)\n```\n\n### 26. select(), arrange() and slice() (Slide #69)\n\n```{r, eval=TRUE,echo=TRUE}\nhotels %>%\nselect(hotel, lead_time) %>%\narrange(lead_time) %>%\nslice(1:5)\n```\n\n### 27. filter() to select rows based on conditions (Slide #73)\n\n```{r, eval=TRUE,echo=TRUE}\nhotels %>%\nfilter(\nadults == 0,\nchildren >= 1\n) %>%\nselect(adults, babies, children)\n\n```\n\n### 28. filter() to select rows based on complicated conditions (Slide #74)\n\n```{r, eval=TRUE,echo=TRUE}\nhotels %>%\nfilter( adults == 1,\nchildren >= 1 | babies >=1) %>% \nselect(adults, babies, children)\n\n```\n\n### 29. count() and arrange() (Slide #76)\n\n```{r, eval=TRUE,echo=TRUE}\nhotels %>%\ncount(market_segment) %>%\narrange(desc(n))\n```\n\n### 30. mutate(), select() and arrange() (Slide #77)\n\n```{r, eval=TRUE,echo=TRUE}\nhotels %>%\nmutate(little_ones = children + babies) %>% \nselect(children, babies, little_ones) %>%\narrange(desc(little_ones))\n\n```\n\n\n### 31. mutate(), filter() and select() (Slide #78)\n\n```{r, eval=TRUE,echo=TRUE}\nhotels %>%\nmutate(little_ones = children + babies) %>%\nfilter(\nlittle_ones >= 1,\nhotel == \"City Hotel\"\n) %>%\nselect(hotel, little_ones)\n\n```","srcMarkdownNoYaml":"\n\n  ```{r setup, include=TRUE}\nknitr::opts_chunk$set(echo = TRUE)\n```\n\n# II. Code to edit and execute using the Code-along.Rmd file \n<br>\n\n## A. Data Wrangling\n<br>\n\n### 1. Loading packages (Slide #16)\n\n```{r, eval=TRUE,echo=TRUE}\n# Load package tidyverse\nlibrary(tidyverse)\n```\n\n### 2. Loading data-set (Slide #16)\n\n```{r, eval=TRUE,echo=FALSE}\n# Read data from the hotels.csv file and assign it to a variable named, \"hotels\"\nread.csv(\"hotels.csv\")\nhotels <- read_csv(\"hotels.csv\")\n```\n\n### 3. List names of the variables in the data-set (Slide #19)\n\n```{r, eval=TRUE,echo=TRUE}\nnames(hotels)\n```\n\n\n### 4. Glimpse of contents of the data-set (Slide #20)\n\n```{r, eval=TRUE,echo=TRUE}\nglimpse(hotels)\n```\n<br>\n\n## B. Choosing rows or columns\n<br>\n\n### 5. Select a single column (Slide #24)\n\n```{r, eval=TRUE,echo=TRUE}\n# View only lead_time (number of days between booking and arrival)\nselect(hotels, lead_time)\n```\n\n### 6. Select multiple columns (Slide #25)\n\n```{r, eval=TRUE,echo=TRUE}\n# View lead_time, agent and market_segment\nselect(hotels, lead_time,agent,market_segment)\n```\n\n### 7. Arrange entries of a column (Slide #28)\n\n```{r, eval=TRUE,echo=TRUE}\n# Rearranged entries of lead_time\narrange(hotels, lead_time)\n```\n\n### 8. Arrange entries of a column in the descending order (Slide #30)\n\n```{r, eval=TRUE,echo=TRUE}\n#Rearrange entries in the descending order\narrange(hotels, desc(lead_time))\n```\n\n### 9. Select columns and arrange the entries of a column (Slide #31)\n\n```{r, eval=TRUE,echo=TRUE}\narrange(\nselect(hotels, lead_time),\ndesc(lead_time)\n)\n\n```\n\n### 10. Select columns and arrange the entries of a column using the pipe operator (Slide #37)\n\n```{r, eval=TRUE,echo=TRUE}\nhotels %>%\nselect(lead_time) %>%\narrange(desc(lead_time))\n```\n\n### 11. Pick rows matching a condition (Slide #44)\n\n```{r, eval=TRUE,echo=TRUE}\nhotels %>%\nfilter(children >= 1) %>%\nselect(hotel, children)\n\n```\n\n### 12. Pick rows matching multiple conditions (Slide #46)\n\n```{r, eval=TRUE,echo=TRUE}\nhotels %>%\nfilter(children >= 1, hotel==\"City Hotel\") %>%\nselect(hotel, children)\n\n```\n\n### 13. Non-conditional selection of rows: sequence of indices (Slide #49)\n\n```{r, eval=TRUE,echo=TRUE}\nhotels %>% slice(1:5)\n```\n\n### 14. Non-conditional selection of rows: non-consecutive/specific indices (Slide #50)\n\n```{r, eval=TRUE,echo=TRUE}\nhotels %>% slice(1,3,5)\n```\n\n### 15. Pick unique rows using distinct() (Slide #52)\n\n```{r, eval=TRUE,echo=TRUE}\nhotels %>% distinct(hotel)\n```\n<br>\n\n## C. Creating new columns\n<br>\n\n### 16. Creating a single column with mutate() (Slide #56)\n\n```{r, eval=TRUE,echo=TRUE}\nhotels %>%\nmutate(little_ones = children + babies) %>%\nselect(hotel, little_ones,children,babies)\n```\n\n### 17. Creating multiple columns with mutate() (Slide #58)\n\n```{r, eval=TRUE,echo=TRUE}\nhotels %>%\nmutate(little_ones = children + babies, \naverage_little_ones = mean(little_ones)) %>% \nselect(hotel, little_ones,children,babies)\n\n```\n<br>\n\n## D. More operations with examples\n<br>\n\n### 18. count() to get frequencies (Slide #60)\n\n```{r, eval=TRUE,echo=TRUE}\nhotels %>%\ncount(market_segment)\n```\n\n### 19. count() to get frequencies with sorting of count (Slide #61)\n\n```{r, eval=TRUE,echo=TRUE}\n\nhotels %>%\ncount(market_segment, sort = TRUE)\n```\n\n### 20. count() multiple variables (Slide #62)\n\n```{r, eval=TRUE,echo=TRUE}\nhotels %>%\ncount(hotel, market_segment)\n```\n\n### 21. summarise() for summary statistics (Slide #63)\n\n```{r, eval=TRUE,echo=TRUE}\n# mean average daily rate for all bookings\nhotels %>%\nsummarise(mean_adr = mean(adr))\n\n```\n\n### 22. summarise() by using group_by to find mean (Slide #64)\n\n```{r, eval=TRUE,echo=TRUE}\n# mean average daily rate for all booking at city and resort hotels\nhotels %>%\ngroup_by(hotel) %>%\nsummarise(mean_adr = mean(adr))\n```\n\n### 23. summarise() by using group_by to get count (Slide #65)\n\n```{r, eval=TRUE,echo=TRUE}\n# Count of bookings at city and resort hotels\nhotels %>%\ngroup_by(hotel) %>%\nsummarise(count = n())\n```\n\n### 24. summarise() for multiple summary statistics (Slide #67)\n\n```{r, eval=TRUE,echo=TRUE}\nhotels %>%\nsummarise(\nmin_adr = min(adr),\nmean_adr = mean(adr),\nmedian_adr = median(adr),\nmax_adr = max(adr)\n)\n```\n\n### 25. select(), slice() and arrange() (Slide #68)\n\n```{r, eval=TRUE,echo=TRUE}\nhotels %>%\nselect(hotel, lead_time) %>%\nslice(1:5) %>%\narrange(lead_time)\n```\n\n### 26. select(), arrange() and slice() (Slide #69)\n\n```{r, eval=TRUE,echo=TRUE}\nhotels %>%\nselect(hotel, lead_time) %>%\narrange(lead_time) %>%\nslice(1:5)\n```\n\n### 27. filter() to select rows based on conditions (Slide #73)\n\n```{r, eval=TRUE,echo=TRUE}\nhotels %>%\nfilter(\nadults == 0,\nchildren >= 1\n) %>%\nselect(adults, babies, children)\n\n```\n\n### 28. filter() to select rows based on complicated conditions (Slide #74)\n\n```{r, eval=TRUE,echo=TRUE}\nhotels %>%\nfilter( adults == 1,\nchildren >= 1 | babies >=1) %>% \nselect(adults, babies, children)\n\n```\n\n### 29. count() and arrange() (Slide #76)\n\n```{r, eval=TRUE,echo=TRUE}\nhotels %>%\ncount(market_segment) %>%\narrange(desc(n))\n```\n\n### 30. mutate(), select() and arrange() (Slide #77)\n\n```{r, eval=TRUE,echo=TRUE}\nhotels %>%\nmutate(little_ones = children + babies) %>% \nselect(children, babies, little_ones) %>%\narrange(desc(little_ones))\n\n```\n\n\n### 31. mutate(), filter() and select() (Slide #78)\n\n```{r, eval=TRUE,echo=TRUE}\nhotels %>%\nmutate(little_ones = children + babies) %>%\nfilter(\nlittle_ones >= 1,\nhotel == \"City Hotel\"\n) %>%\nselect(hotel, little_ones)\n\n```"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":{"html_document":null,"df_print":"paged"},"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"toc":true,"output-file":"Code-along-4.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.353","editor":"visual","theme":"Morph","title":"Week-4: Code-along","author":"Tang Ching Xian","date":"31-08-2023","pdf_document":"default"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}