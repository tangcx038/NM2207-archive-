{"title":"Challenge-4","markdown":{"yaml":{"title":"Challenge-4","author":"Tang Ching Xian","date":"04 SEPT 2023","output":"html_document"},"headingText":"Questions","containsRefs":false,"markdown":"\n\n```{r setup, include=TRUE}\nknitr::opts_chunk$set(echo = TRUE)\n```\n\n<style>\np.comment {\nbackground-color: #DBDBDB;\npadding: 10px;\nborder: 1px solid black;\nmargin-left: 25px;\nborder-radius: 5px;\nfont-style: italic;\n}\n\n</style>\n\n<br>\n\nLoad the \"CommQuest2023.csv\" dataset using the `read_csv()` command and assign it to a variable named \"comm_data.\" \n\n```{r, eval=TRUE,echo=TRUE}\n# Load Tidyverse\nlibrary(tidyverse)\n# Read the CSV file and assign it to the variable \"comm_data\"\ncomm_data <- read.csv(\"CommQuest2023_Larger.csv\")\ncomm_data_org <- read.csv(\"CommQuest2023_Larger.csv\")\n```\n<br>\n\n\n#### Question-1: Communication Chronicles\n\nUsing the select command, create a new dataframe containing only the \"date,\" \"channel,\" and \"message\" columns from the \"comm_data\" dataset.\n\n**Solution:**\n\n```{r, eval=TRUE,echo=TRUE}\n# Create a new dataframe with selected columns\nnew_df1<- comm_data%>% select(date,channel,message)\n# Overview of new dataframe\nglimpse(new_df1)\n```\n<br>\n\n#### Question-2: Channel Selection\n\nUse the filter command to create a new dataframe that includes messages sent through the \"Twitter\" channel on August 2nd.\n\n**Solution:**\n\n```{r, eval=FALSE,echo=TRUE}\n# Create new dataframe with filtered data\nnew_df2 <- comm_data %>%filter(channel == \"Twitter\", date == \"2023-08-02\")%>%select(channel,date,message)\nglimpse(new_df2)\n```\n<br>\n\n#### Question-3: Chronological Order\n\nUtilizing the arrange command, arrange the \"comm_data\" dataframe in ascending order based on the \"date\" column.\n\n**Solution:**\n\n```{r, eval=F,echo=TRUE}\n#Arrange the dataframe in ascending order based on the \"date\" column\narranged_data <- comm_data %>%arrange(date)\nprint(arranged_data)\n```\n<br>\n\n#### Question-4: Distinct Discovery\n\nApply the distinct command to find the unique senders in the \"comm_data\" dataframe.\n\n**Solution:**\n\n```{r, eval=TRUE,echo=TRUE}\n#Use distinct() to find unique senders\nunique_senders <- comm_data %>%distinct(sender)%>%select(sender)\nprint(unique_senders)\n```\n<br>\n\n#### Question-5: Sender Stats\n\nEmploy the count and group_by commands to generate a summary table that shows the count of messages sent by each sender in the \"comm_data\" dataframe.\n\n**Solution:**\n\n```{r, eval=TRUE,echo=TRUE}\n# Group by sender and count messages\nsummary_table <- comm_data %>%group_by(sender) %>%summarise(count = n())\nprint(summary_table)\n\n#Another method just using count()\n##summary_table2 <- comm_data %>%group_by(sender)%>%count(sender)\n#Break down of each message and count\n##summary_table2 <- comm_data %>%group_by(sender)%>%*count(message)*\n\n```\n<br>\n\n#### Question-6: Channel Chatter Insights\n\nUsing the group_by and count commands, create a summary table that displays the count of messages sent through each communication channel in the \"comm_data\" dataframe.\n\n**Solution:**\n\n```{r, eval=TRUE,echo=TRUE}\n# Group by channel and count messages\nsummary_table2 <- comm_data %>%group_by(channel) %>%summarise(count = n())\nprint(summary_table2)\n\n#Another method \n##summary_table2 <- comm_data %>%group_by(channel) %>%count(channel)\n```\n<br>\n\n#### Question-7: Positive Pioneers\n\nUtilize the filter, select, and arrange commands to identify the top three senders with the highest average positive sentiment scores. Display their usernames and corresponding sentiment averages.\n\n**Solution:**\n\n```{r, eval=TRUE,echo=TRUE}\n# Filter for positive sentiment scores\npositive_data <- comm_data %>%\n  filter(sentiment> 0)\n\n# Group by sender and calculate the average sentiment score\nsender_avg_sentiment <- positive_data %>%\n  group_by(sender) %>%\n  summarise(avg_sentiment=mean(sentiment))\n\n# Arrange senders in descending order of average sentiment score\ntop_senders <- sender_avg_sentiment %>%\n  arrange(desc(avg_sentiment))\n\n# Select the top three senders\ntop_three_senders <- top_senders %>%\n  slice(1:3)\n\n# Display the top three senders and their corresponding sentiment averages\nprint(top_three_senders)\n```\n<br>\n\n#### Question-8: Message Mood Over Time\n\nWith the group_by, summarise, and arrange commands, calculate the average sentiment score for each day in the \"comm_data\" dataframe.\n\n**Solution:**\n\n```{r, eval=TRUE,echo=TRUE}\n# Group by date and calculate the average sentiment score for each day\ndaily_avg_sentiment <- comm_data %>%\n  group_by(date) %>%\n  summarise(avg_sentiment = mean(sentiment))\n\n# Arrange the results in ascending order of date\ndaily_avg_sentiment <- daily_avg_sentiment %>%\n  arrange(date)\n\n# Display the dataframe with daily average sentiment scores\nprint(daily_avg_sentiment)\n\n#another method\n##daily<-comm_data%>%group_by(date)%>%summarise(mean(sentiment))%>%arrange(date)\n  \n```\n<br>\n\n#### Question-9: Selective Sentiments\n\nUse the filter and select commands to extract messages with a negative sentiment score (less than 0) and create a new dataframe.\n\n**Solution:**\n\n```{r, eval=FALSE,echo=TRUE}\n\n# Filter for messages with negative sentiment scores\nnegative_sentiment_data <- comm_data %>%\n  filter(sentiment< 0)\n\nnew_df3<-negative_sentiment_data\nprint.Date(new_df3)\n\n#another method\n##negative<-comm_data%>%select(message,sentiment)%>%filter(sentiment<0)\n```\n<br>\n\n#### Question-10: Enhancing Engagement\n\nApply the mutate command to add a new column to the \"comm_data\" dataframe, representing a sentiment label: \"Positive,\" \"Neutral,\" or \"Negative,\" based on the sentiment score.\n\n**Solution:**\n\n```{r, eval=F,echo=TRUE}\n# Mutate to add a new column \"sentiment_label\" based on sentiment scores\ncomm_data<-comm_data %>% select(sentiment) %>% mutate(positive = as.logical(sentiment > 0), neutral = as.logical(sentiment == 0), negative = as.logical(sentiment < 0))\nprint(comm_data)\n\n\n#comm_data %>% select(sentiment) %>% mutate(sentiment_label = ifelse(as.logical(sentiment > 0), \"Positive\", ifelse(as.logical(sentiment < 0), \"Negative\", \"Neutral\")))\n#print(comm_data)\n```\n<br>\n\n#### Question-11: Message Impact\n\nCreate a new dataframe using the mutate and arrange commands that calculates the product of the sentiment score and the length of each message. Arrange the results in descending order.\n\n**Solution:**\n\n```{r, eval=F,echo=TRUE}\n#SHINY ERROR, INTRA ERROR, UNABLE TO RESOLVE\n\ncomm_data %>% mutate(a = sentiment*nchar(comm_data_org$message))%>%arrange(desc(a)) \nprint(comm_data)\n\n```\n<br>\n\n#### Question-12: Daily Message Challenge\n\nUse the group_by, summarise, and arrange commands to find the day with the highest total number of characters sent across all messages in the \"comm_data\" dataframe.\n\n**Solution:**\n\n```{r, eval=FALSE,echo=TRUE}\n# Group by date and calculate the total number of characters sent on each day\ndaily_char_count <- comm_data %>%\n  group_by(date) %>%\n  summarise(total_characters = sum(nchar(message)))\n\n#note:sum(nchar(message) can be replaced by length(message)\n\n# Arrange the results in descending order of total_characters\ndaily_char_count <- daily_char_count %>%\n  arrange(desc(total_characters))\n\n# Get the day with the highest total_characters\nday_with_highest_chars <- daily_char_count$day[1]\n\n# Optionally, you can print the day with the highest total_characters\nprint(day_with_highest_chars)\n```\n<br>\n\n#### Question-13: Untidy data\n\nCan you list at least two reasons why the dataset illustrated in slide 10 is non-tidy? How can it be made Tidy?\n\n**Solution:** \n1)X is not a data, can be left as NA to be recognised\n2)empty rows/observations\n3)+/- is not recognised \n4) too many variables in a column","srcMarkdownNoYaml":"\n\n```{r setup, include=TRUE}\nknitr::opts_chunk$set(echo = TRUE)\n```\n\n<style>\np.comment {\nbackground-color: #DBDBDB;\npadding: 10px;\nborder: 1px solid black;\nmargin-left: 25px;\nborder-radius: 5px;\nfont-style: italic;\n}\n\n</style>\n\n## Questions\n<br>\n\nLoad the \"CommQuest2023.csv\" dataset using the `read_csv()` command and assign it to a variable named \"comm_data.\" \n\n```{r, eval=TRUE,echo=TRUE}\n# Load Tidyverse\nlibrary(tidyverse)\n# Read the CSV file and assign it to the variable \"comm_data\"\ncomm_data <- read.csv(\"CommQuest2023_Larger.csv\")\ncomm_data_org <- read.csv(\"CommQuest2023_Larger.csv\")\n```\n<br>\n\n\n#### Question-1: Communication Chronicles\n\nUsing the select command, create a new dataframe containing only the \"date,\" \"channel,\" and \"message\" columns from the \"comm_data\" dataset.\n\n**Solution:**\n\n```{r, eval=TRUE,echo=TRUE}\n# Create a new dataframe with selected columns\nnew_df1<- comm_data%>% select(date,channel,message)\n# Overview of new dataframe\nglimpse(new_df1)\n```\n<br>\n\n#### Question-2: Channel Selection\n\nUse the filter command to create a new dataframe that includes messages sent through the \"Twitter\" channel on August 2nd.\n\n**Solution:**\n\n```{r, eval=FALSE,echo=TRUE}\n# Create new dataframe with filtered data\nnew_df2 <- comm_data %>%filter(channel == \"Twitter\", date == \"2023-08-02\")%>%select(channel,date,message)\nglimpse(new_df2)\n```\n<br>\n\n#### Question-3: Chronological Order\n\nUtilizing the arrange command, arrange the \"comm_data\" dataframe in ascending order based on the \"date\" column.\n\n**Solution:**\n\n```{r, eval=F,echo=TRUE}\n#Arrange the dataframe in ascending order based on the \"date\" column\narranged_data <- comm_data %>%arrange(date)\nprint(arranged_data)\n```\n<br>\n\n#### Question-4: Distinct Discovery\n\nApply the distinct command to find the unique senders in the \"comm_data\" dataframe.\n\n**Solution:**\n\n```{r, eval=TRUE,echo=TRUE}\n#Use distinct() to find unique senders\nunique_senders <- comm_data %>%distinct(sender)%>%select(sender)\nprint(unique_senders)\n```\n<br>\n\n#### Question-5: Sender Stats\n\nEmploy the count and group_by commands to generate a summary table that shows the count of messages sent by each sender in the \"comm_data\" dataframe.\n\n**Solution:**\n\n```{r, eval=TRUE,echo=TRUE}\n# Group by sender and count messages\nsummary_table <- comm_data %>%group_by(sender) %>%summarise(count = n())\nprint(summary_table)\n\n#Another method just using count()\n##summary_table2 <- comm_data %>%group_by(sender)%>%count(sender)\n#Break down of each message and count\n##summary_table2 <- comm_data %>%group_by(sender)%>%*count(message)*\n\n```\n<br>\n\n#### Question-6: Channel Chatter Insights\n\nUsing the group_by and count commands, create a summary table that displays the count of messages sent through each communication channel in the \"comm_data\" dataframe.\n\n**Solution:**\n\n```{r, eval=TRUE,echo=TRUE}\n# Group by channel and count messages\nsummary_table2 <- comm_data %>%group_by(channel) %>%summarise(count = n())\nprint(summary_table2)\n\n#Another method \n##summary_table2 <- comm_data %>%group_by(channel) %>%count(channel)\n```\n<br>\n\n#### Question-7: Positive Pioneers\n\nUtilize the filter, select, and arrange commands to identify the top three senders with the highest average positive sentiment scores. Display their usernames and corresponding sentiment averages.\n\n**Solution:**\n\n```{r, eval=TRUE,echo=TRUE}\n# Filter for positive sentiment scores\npositive_data <- comm_data %>%\n  filter(sentiment> 0)\n\n# Group by sender and calculate the average sentiment score\nsender_avg_sentiment <- positive_data %>%\n  group_by(sender) %>%\n  summarise(avg_sentiment=mean(sentiment))\n\n# Arrange senders in descending order of average sentiment score\ntop_senders <- sender_avg_sentiment %>%\n  arrange(desc(avg_sentiment))\n\n# Select the top three senders\ntop_three_senders <- top_senders %>%\n  slice(1:3)\n\n# Display the top three senders and their corresponding sentiment averages\nprint(top_three_senders)\n```\n<br>\n\n#### Question-8: Message Mood Over Time\n\nWith the group_by, summarise, and arrange commands, calculate the average sentiment score for each day in the \"comm_data\" dataframe.\n\n**Solution:**\n\n```{r, eval=TRUE,echo=TRUE}\n# Group by date and calculate the average sentiment score for each day\ndaily_avg_sentiment <- comm_data %>%\n  group_by(date) %>%\n  summarise(avg_sentiment = mean(sentiment))\n\n# Arrange the results in ascending order of date\ndaily_avg_sentiment <- daily_avg_sentiment %>%\n  arrange(date)\n\n# Display the dataframe with daily average sentiment scores\nprint(daily_avg_sentiment)\n\n#another method\n##daily<-comm_data%>%group_by(date)%>%summarise(mean(sentiment))%>%arrange(date)\n  \n```\n<br>\n\n#### Question-9: Selective Sentiments\n\nUse the filter and select commands to extract messages with a negative sentiment score (less than 0) and create a new dataframe.\n\n**Solution:**\n\n```{r, eval=FALSE,echo=TRUE}\n\n# Filter for messages with negative sentiment scores\nnegative_sentiment_data <- comm_data %>%\n  filter(sentiment< 0)\n\nnew_df3<-negative_sentiment_data\nprint.Date(new_df3)\n\n#another method\n##negative<-comm_data%>%select(message,sentiment)%>%filter(sentiment<0)\n```\n<br>\n\n#### Question-10: Enhancing Engagement\n\nApply the mutate command to add a new column to the \"comm_data\" dataframe, representing a sentiment label: \"Positive,\" \"Neutral,\" or \"Negative,\" based on the sentiment score.\n\n**Solution:**\n\n```{r, eval=F,echo=TRUE}\n# Mutate to add a new column \"sentiment_label\" based on sentiment scores\ncomm_data<-comm_data %>% select(sentiment) %>% mutate(positive = as.logical(sentiment > 0), neutral = as.logical(sentiment == 0), negative = as.logical(sentiment < 0))\nprint(comm_data)\n\n\n#comm_data %>% select(sentiment) %>% mutate(sentiment_label = ifelse(as.logical(sentiment > 0), \"Positive\", ifelse(as.logical(sentiment < 0), \"Negative\", \"Neutral\")))\n#print(comm_data)\n```\n<br>\n\n#### Question-11: Message Impact\n\nCreate a new dataframe using the mutate and arrange commands that calculates the product of the sentiment score and the length of each message. Arrange the results in descending order.\n\n**Solution:**\n\n```{r, eval=F,echo=TRUE}\n#SHINY ERROR, INTRA ERROR, UNABLE TO RESOLVE\n\ncomm_data %>% mutate(a = sentiment*nchar(comm_data_org$message))%>%arrange(desc(a)) \nprint(comm_data)\n\n```\n<br>\n\n#### Question-12: Daily Message Challenge\n\nUse the group_by, summarise, and arrange commands to find the day with the highest total number of characters sent across all messages in the \"comm_data\" dataframe.\n\n**Solution:**\n\n```{r, eval=FALSE,echo=TRUE}\n# Group by date and calculate the total number of characters sent on each day\ndaily_char_count <- comm_data %>%\n  group_by(date) %>%\n  summarise(total_characters = sum(nchar(message)))\n\n#note:sum(nchar(message) can be replaced by length(message)\n\n# Arrange the results in descending order of total_characters\ndaily_char_count <- daily_char_count %>%\n  arrange(desc(total_characters))\n\n# Get the day with the highest total_characters\nday_with_highest_chars <- daily_char_count$day[1]\n\n# Optionally, you can print the day with the highest total_characters\nprint(day_with_highest_chars)\n```\n<br>\n\n#### Question-13: Untidy data\n\nCan you list at least two reasons why the dataset illustrated in slide 10 is non-tidy? How can it be made Tidy?\n\n**Solution:** \n1)X is not a data, can be left as NA to be recognised\n2)empty rows/observations\n3)+/- is not recognised \n4) too many variables in a column"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":"html_document","warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"toc":true,"output-file":"Challenge-4.4-9.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.353","editor":"visual","theme":"Morph","title":"Challenge-4","author":"Tang Ching Xian","date":"04 SEPT 2023"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}