{"title":"Week-5: Code-along","markdown":{"yaml":{"title":"Week-5: Code-along","author":"Tang Ching Xian","date":"12 September 2023","output":{"html_document":null,"df_print":"paged"},"pdf_document":"default"},"headingText":"II. Code to edit and execute using the Code-along.Rmd file","containsRefs":false,"markdown":"\n\n```{r setup, include=T}\nknitr::opts_chunk$set(echo = TRUE)\n```\n\n<br>\n\n## A. Writing a function\n<br>\n\n### 1. Write a function to print a \"Hello\" message (Slide #14)\n\n```{r, eval=T,echo=TRUE}\n# Define a function to print a \"Hello\" message to a person\nsay_hello_to <- function(name) {\n  print(paste0(\"Hello \", name, \"!\"))\n}\n\n\n```\n<br>\n\n### 2. Function call with different input names (Slide #15)\n\n```{r, eval=T,echo=TRUE}\n# Call the function and pass a name\nsay_hello_to('Kashif')\n\nsay_hello_to('Zach')\n\nsay_hello_to('Deniz')\n\n```\n<br>\n\n### 3. typeof primitive functions (Slide #16)\n\n```{r, eval=T,echo=TRUE}\ntypeof(`+`)\ntypeof(sum)\n\n```\n<br>\n\n### 4. typeof user-defined functions (Slide #17)\n\n```{r, eval=T,echo=TRUE}\ntypeof(say_hello_to)\ntypeof(mean)\n```\n<br>\n\n### 5. Function to calculate mean of a sample (Slide #19)\n\n```{r, eval=T,echo=TRUE}\ncalc_sample_mean <- function(sample_size) {\nmean(rnorm(sample_size))\n}\n\n```\n<br>\n\n### 6. Test your function (Slide #22)\n\n```{r, eval=T,echo=TRUE}\ncalc_sample_mean(1000)\n\n```\n<br>\n```{r, eval=T,echo=TRUE}\nvalues <- c(100, 300, 3000)\nsample_mean <- mean(values)\nprint(sample_mean)\n```\n#Another method\nCalculate_sample_mean <- mean(sample_sizes =c(100, 300, 3000))\n```\n<br>\n\n### 7. Customizing the function to suit input (Slide #23)\n\n```{r, eval=T,echo=TRUE}\nlibrary(tidyverse)\n#creating a vector to test our function\nsample_tibble <- tibble(sample_sizes =\nc(100, 300, 3000))\n#using rowwise groups the data by row,\n# allowing calc_sample_mean\nsample_tibble %>%\ngroup_by(sample_sizes) %>%\nmutate(sample_means =\ncalc_sample_mean(sample_sizes))\n```\n<br>\n\n### 8. Setting defaults (Slide #25)\n\n```{r, eval=T,echo=TRUE}\n# First define the function\ncalc_sample_mean <- function(sample_size,\nour_mean=0,\nour_sd=1) {\nsample <- rnorm(sample_size,\nmean = our_mean,\nsd = our_sd)\nmean(sample)\n}\n# Call the function\ncalc_sample_mean(sample_size = 10)\n\n```\n<br>\n\n### 9. Different input combinations (Slide #26)\n\n```{r, eval=T,echo=TRUE}\ncalc_sample_mean(10, our_sd = 2)\ncalc_sample_mean(10, our_mean = 6) \ncalc_sample_mean(10, 6, 2) \n```\n<br>\n\n### 10. Different input combinations (Slide #27)\n\n```{r, eval=T,echo=TRUE,error=T} \n# set error=TRUE to see the error message in the output\ncalc_sample_mean(our_mean = 5)\n```\n<br>\n\n### 11. Some more examples (Slide #28)\n\n```{r, eval=T,echo=TRUE,error=T} \n\nadd_two <- function(x) {\nx+2\n}\n#Example 1\nadd_two(4)\n#Example 2\nadd_two(-34)\n#Example 3\nadd_two(5.784)\n\n#There are no errors in this code, and it demonstrates that the add_two function can handle different data types (integers and floating-point numbers) without issues.\n```\n<br>\n\n## B. Scoping\n<br>\n\n### 12. Multiple assignment of z (Slide #36)\n\n```{r, eval=T,echo=TRUE}\n# Initialize z\nz <- 1\nsprintf(\"The value assigned to z outside the function is %d\",z)\n## [1] \"The value assigned to z outside the function is 1\"\n# declare a function, notice how we pass a value of 2 for z\nfoo <- function(z = 2) {\n# reassigning z\nz <- 3\nreturn(z+3)\n}\nfoo()\n## [1] 6\n\n```\n<br>\n\n### 13. Multiple assignment of z (Slide #37)\n\n```{r, eval=T,echo=TRUE}\n# Initialize z\nz <- 1\n# declare a function, notice how we pass a value of 2 for z\nfoo <- function(z = 2) {\n# reassigning z\nz <- 3\nreturn(z+3)\n}\n# another reassignment of z\nfoo(z = 4)\n# Accessing z outside the function\n```\n<br>","srcMarkdownNoYaml":"\n\n```{r setup, include=T}\nknitr::opts_chunk$set(echo = TRUE)\n```\n\n# II. Code to edit and execute using the Code-along.Rmd file \n<br>\n\n## A. Writing a function\n<br>\n\n### 1. Write a function to print a \"Hello\" message (Slide #14)\n\n```{r, eval=T,echo=TRUE}\n# Define a function to print a \"Hello\" message to a person\nsay_hello_to <- function(name) {\n  print(paste0(\"Hello \", name, \"!\"))\n}\n\n\n```\n<br>\n\n### 2. Function call with different input names (Slide #15)\n\n```{r, eval=T,echo=TRUE}\n# Call the function and pass a name\nsay_hello_to('Kashif')\n\nsay_hello_to('Zach')\n\nsay_hello_to('Deniz')\n\n```\n<br>\n\n### 3. typeof primitive functions (Slide #16)\n\n```{r, eval=T,echo=TRUE}\ntypeof(`+`)\ntypeof(sum)\n\n```\n<br>\n\n### 4. typeof user-defined functions (Slide #17)\n\n```{r, eval=T,echo=TRUE}\ntypeof(say_hello_to)\ntypeof(mean)\n```\n<br>\n\n### 5. Function to calculate mean of a sample (Slide #19)\n\n```{r, eval=T,echo=TRUE}\ncalc_sample_mean <- function(sample_size) {\nmean(rnorm(sample_size))\n}\n\n```\n<br>\n\n### 6. Test your function (Slide #22)\n\n```{r, eval=T,echo=TRUE}\ncalc_sample_mean(1000)\n\n```\n<br>\n```{r, eval=T,echo=TRUE}\nvalues <- c(100, 300, 3000)\nsample_mean <- mean(values)\nprint(sample_mean)\n```\n#Another method\nCalculate_sample_mean <- mean(sample_sizes =c(100, 300, 3000))\n```\n<br>\n\n### 7. Customizing the function to suit input (Slide #23)\n\n```{r, eval=T,echo=TRUE}\nlibrary(tidyverse)\n#creating a vector to test our function\nsample_tibble <- tibble(sample_sizes =\nc(100, 300, 3000))\n#using rowwise groups the data by row,\n# allowing calc_sample_mean\nsample_tibble %>%\ngroup_by(sample_sizes) %>%\nmutate(sample_means =\ncalc_sample_mean(sample_sizes))\n```\n<br>\n\n### 8. Setting defaults (Slide #25)\n\n```{r, eval=T,echo=TRUE}\n# First define the function\ncalc_sample_mean <- function(sample_size,\nour_mean=0,\nour_sd=1) {\nsample <- rnorm(sample_size,\nmean = our_mean,\nsd = our_sd)\nmean(sample)\n}\n# Call the function\ncalc_sample_mean(sample_size = 10)\n\n```\n<br>\n\n### 9. Different input combinations (Slide #26)\n\n```{r, eval=T,echo=TRUE}\ncalc_sample_mean(10, our_sd = 2)\ncalc_sample_mean(10, our_mean = 6) \ncalc_sample_mean(10, 6, 2) \n```\n<br>\n\n### 10. Different input combinations (Slide #27)\n\n```{r, eval=T,echo=TRUE,error=T} \n# set error=TRUE to see the error message in the output\ncalc_sample_mean(our_mean = 5)\n```\n<br>\n\n### 11. Some more examples (Slide #28)\n\n```{r, eval=T,echo=TRUE,error=T} \n\nadd_two <- function(x) {\nx+2\n}\n#Example 1\nadd_two(4)\n#Example 2\nadd_two(-34)\n#Example 3\nadd_two(5.784)\n\n#There are no errors in this code, and it demonstrates that the add_two function can handle different data types (integers and floating-point numbers) without issues.\n```\n<br>\n\n## B. Scoping\n<br>\n\n### 12. Multiple assignment of z (Slide #36)\n\n```{r, eval=T,echo=TRUE}\n# Initialize z\nz <- 1\nsprintf(\"The value assigned to z outside the function is %d\",z)\n## [1] \"The value assigned to z outside the function is 1\"\n# declare a function, notice how we pass a value of 2 for z\nfoo <- function(z = 2) {\n# reassigning z\nz <- 3\nreturn(z+3)\n}\nfoo()\n## [1] 6\n\n```\n<br>\n\n### 13. Multiple assignment of z (Slide #37)\n\n```{r, eval=T,echo=TRUE}\n# Initialize z\nz <- 1\n# declare a function, notice how we pass a value of 2 for z\nfoo <- function(z = 2) {\n# reassigning z\nz <- 3\nreturn(z+3)\n}\n# another reassignment of z\nfoo(z = 4)\n# Accessing z outside the function\n```\n<br>"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":{"html_document":null,"df_print":"paged"},"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"output-file":"Code-along-5.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.353","editor":"visual","theme":"Morph","title":"Week-5: Code-along","author":"Tang Ching Xian","date":"12 September 2023","pdf_document":"default"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}