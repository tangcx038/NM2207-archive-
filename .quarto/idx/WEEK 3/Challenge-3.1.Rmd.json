{"title":"Challenge-3","markdown":{"yaml":{"title":"Challenge-3","author":"Tang Ching Xian","date":"27/08/2023","output":"html_document"},"headingText":"I. Questions","containsRefs":false,"markdown":"\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\n```\n\n<style>\np.comment {\nbackground-color: #DBDBDB;\npadding: 10px;\nborder: 1px solid black;\nmargin-left: 25px;\nborder-radius: 5px;\nfont-style: italic;\n}\n\n</style>\n\n\n#### Question 1: Emoji Expressions\n\nImagine you're analyzing social media posts for sentiment analysis. If you were to create a variable named \"postSentiment\" to store the sentiment of a post using emojis (üòÑ for positive, üòê for neutral, üò¢ for negative), what data type would you assign to this variable? Why? (_narrative type question, no code required_)\n\n**Solution:**  Since the emojis represent positive, neutral and negative, they represents catergories with order, thus they are ordinal categoric data which are normally character. Since we are using \"postSentiment\", it would likely to be assigned the data type of \"string\".\n\n\n#### Question 2: Hashtag Havoc\n\nIn a study on trending hashtags, you want to store the list of hashtags associated with a post. What data type would you choose for the variable \"postHashtags\"? How might this data type help you analyze and categorize the hashtags later? (_narrative type question, no code required_)\n\n**Solution:**  postHashtags would likely to be datatype \"list\" or character string. Element in a list can be named and list are useful for storing hashtags since they can vary in number and their order of appearance may be important. Therefore, with list, one can categories the data based on criteria and iterate through the list, tally up the occurrence of each hashtag and identify trends and patterns.\n\n\n#### Question 3: Time Traveler's Log\n  \nYou're examining the timing of user interactions on a website. Would you use a numeric or non-numeric data type to represent the timestamp of each interaction? Explain your choice (_narrative type question, no code required_)\n\n**Solution:** I would use numeric data type since timestamps inherently involve a sequential order and time increase in ascending or descending order. It has numbers with decimal values.\n\n\n#### Question 4: Event Elegance\n\nYou're managing an event database that includes the date and time of each session. What data type(s) would you use to represent the session date and time? (_narrative type question, no code required_)\n\n**Solution:**  I would use a continuous numeric datatype because time and date are numerical values, it is continuous and has order of progression of time. Using numeric datatype, one will be able to store and manipulate time-related data easily.\n\n#### Question 5: Nominee Nominations\nYou're analyzing nominations for an online award. Each participant can nominate multiple candidates. What data type would be suitable for storing the list of nominated candidates for each participant?  (_narrative type question, no code required_)\n\n**Solution:**  Since each participants can nominate multiple candidates,  using list data type can elicit names in the list, retrieve the element specifically named and truncated list. \n\n\n#### Question 6: Communication Channels\nIn a survey about preferred communication channels, respondents choose from options like \"email,\" \"phone,\" or \"social media.\" What data type would you assign to the variable \"preferredChannel\"? (_narrative type question, no code required_)\n\n**Solution:** I woudl assign categoric data type for \"preferredChannel\" since categorical dat type is used to represent data that has distinct categories without any inherent order. Since \"email\",\"phone\", \"social media\" are discrete, \"preferredChannel\" variable is suitable because it accurately reflects the data without implying any sort of numeric relationship.\n\n#### Question 7: Colorful Commentary\n\nIn a design feedback survey, participants are asked to describe their feelings about a website using color names (e.g., \"warm red,\" \"cool blue\"). What data type would you choose for the variable \"feedbackColor\"? (_narrative type question, no code required_)\n\n**Solution:**  Since the color names are \"red\" and \"blue\", they are Categoric variables and they are nominal as they do not have natural ordering. Therefore their type is character or logical. But in this case, it should be string of characters. \n\n#### Question 8: Variable Exploration\n\nImagine you're conducting a study on social media usage. Identify three variables related to this study, and specify their data types in R. Classify each variable as either numeric or non-numeric.\n\n**Solution:**   \nVariable 1: Number of followers\nData type: Numeric (integer; whole number)\n\nVariable 2: Time spent on social media\nData type: Numeric (Double; decimal values)\n\nVariable 3: Favourite social media platform\nData type: Catgoric character (String; non-numeric)\n\n#### Question 9: Vector Variety\n\nCreate a numeric vector named \"ages\" containing the ages of five people: 25, 30, 22, 28, and 33. Print the vector.\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\nages<- c(25L,30L,22L,28L,33L)\nprint(ages)\n```\n\n#### Question 10: List Logic\n\nConstruct a list named \"student_info\" that contains the following elements:\n\n  - A character vector of student names: \"Alice,\" \"Bob,\" \"Catherine\"\n\n  - A numeric vector of their respective scores: 85, 92, 78\n\n  - A logical vector indicating if they passed the exam: TRUE, TRUE, FALSE\n\nPrint the list.\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\nstudent_info<-list (name=c(\"Alice\",\"Bob\",\"Catherine\"), scores=c(85,92,78),passed_exam=c(TRUE,TRUE,FALSE))\nprint(student_info)\n```\n\n#### Question 11: Type Tracking\n\nYou have a vector \"data\" containing the values 10, 15.5, \"20\", and TRUE. Determine the data types of each element using the typeof() function.\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\n# Create a vector\nx <- c(10L)\n# Check the type of x\ntypeof(x)\n# Add a character to the vector\nx <- c(x,15.5)\n# Check the type of x\ntypeof(x)\n# Add a character to the vector\nx <- c(x,\"20\")\n# Check the type of x\ntypeof(x)\n# Add a character to the vector\nx <- c(TRUE)\n# Check the type of x\ntypeof(x)\n```\n\n#### Question 12: Coercion Chronicles\n\nYou have a numeric vector \"prices\" with values 20.5, 15, and \"25\". Use explicit coercion to convert the last element to a numeric data type. Print the updated vector.\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\nprices <- c(20.5, 15, \"25\")\n\n# Convert the last element to a numeric data type\nprices[3] <- as.numeric(prices[3])\n\n```\n\n#### Question 13: Implicit Intuition\n\nCombine the numeric vector c(5, 10, 15) with the character vector c(\"apple\", \"banana\", \"cherry\"). What happens to the data types of the combined vector? Explain the concept of implicit coercion.\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\nnumeric_vector <- c(5, 10, 15)\ncharacter_vector <- c(\"apple\", \"banana\", \"cherry\")\ncombined_vector <- c(numeric_vector, character_vector)\n\nprint(combined_vector)\nprint(typeof(combined_vector))\n```\nThe data types of the combined vector will be implicitly coerced to a common data type. In this case, the resulting vector will be a characater data type due to the presence of character vector, hence R convert the numeric data type to character data type based on its content.\n\n\n#### Question 14: Coercion Challenges\n\nYou have a vector \"numbers\" with values 7, 12.5, and \"15.7\". Calculate the sum of these numbers. Will R automatically handle the data type conversion? If not, how would you handle it?\n\n**Solution:** \nMixing different data types (numeric and character) in arithmetic operations, R will not automatically handle the data type conversion. Since R will not be able to automatically handle the data type conversion, I need to use explicit coercion to convert the character into numeric using as.numeric.\n```{r, eval=TRUE,echo=TRUE}\n numbers <- c(7, 12.5, \"15.7\")\n\n# Convert character elements to numeric\nnumbers <- as.numeric(numbers)\n\n# Calculate the sum\nsum_result <- sum(numbers)\n\n#simplify \n#sum(as.numeric(numbers))\n\nprint(sum_result)\n```\n\n#### Question 15: Coercion Consequences\n\nSuppose you want to calculate the average of a vector \"grades\" with values 85, 90.5, and \"75.2\". If you directly calculate the mean using the mean() function, what result do you expect? How might you ensure accurate calculation?\n\n**Solution:** \nIf I directly calculate the mean of the vector \"grades\" with values 85, 90.5, and \"75.2\" using the mean() function without any data type conversion,can lead to incorrect results such as 85. \nAs shown here,\nmean(85,90.5,\"75.2\")\n[1] 85 OR\ngrades <- c(85, 90.5, \"75.2\")\nmean(grades)\n[1] NA\nMean() function requires the input vector to contain only numeric values.\n```{r, eval=TRUE,echo=TRUE}\ngrades <- c(85, 90.5, \"75.2\")\n\n# Convert character element to numeric\ngrades <- as.numeric(grades)\n\n# Calculate the mean\nmean_result <- mean(grades)\n\n# Simplify\n#mean_result <- mean(as.numeric(grades))\nprint(mean_result)\n```\n\n#### Question 16: Data Diversity in Lists\n\nCreate a list named \"mixed_data\" with the following components:\n\n  - A numeric vector: 10, 20, 30\n  \n  - A character vector: \"red\", \"green\", \"blue\"\n\n  - A logical vector: TRUE, FALSE, TRUE\n  \nCalculate the mean of the numeric vector within the list.\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\n# Creating the list with different components\nmixed_data <- list(numeric_vector = c(10, 20, 30),character_vector = c(\"red\", \"green\", \"blue\"),logical_vector = c(TRUE, FALSE, TRUE))\n\n# Calculate the mean of the numeric vector within the list\nmean_numeric <- mean(mixed_data$numeric_vector)\n#Another way to calculate the mean of the numeric vector within the list\n#mean_numeric <- mean(mixed_data[[\"numeric_vector\"]])\nprint(mean_numeric)\n\n```\n\n#### Question 17: List Logic Follow-up\n\nUsing the \"student_info\" list from Question 10, extract and print the score of the student named \"Bob.\"\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\n# Assuming you have the \"student_info\" list defined from Question 10\nstudent_info<-list(names = c(\"Alice\", \"Bob\", \"Catherine\"),scores = c(85, 92, 78),passed_exam = c(TRUE, TRUE, FALSE))\n\n# Extract and print the score of the student named \"Bob\"\nbob_score<-student_info$scores[student_info$names == \"Bob\"]\n\n#To find out the number of people who pass the exam\n#length((student_info$names[student_info$scores[student_info$passed_exam==\"TRUE\"]]))\n\n#To find out who pass the exam\n#> student_passed<-c(list(student_info$names[student_info$scores[student_info$passed_exam==\"TRUE\"]]))\n#> return NA, need to solve\n\nprint(bob_score)\n\n```\n\n#### Question 18: Dynamic Access\n\nCreate a numeric vector values with random values. Write R code to dynamically access and print the last element of the vector, regardless of its length.\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\n# Create a numeric vector with random random values\n# values <- runif(10, min = 0, max = 100)\n\n# Create a numeric vector with random fixed values\nvalues <- c(10, 20, 30, 40, 50)\n\n# Get the length of the vector\nvector_length <- length(values)\n\n# Access and print the last element dynamically\nlast_element <- values[vector_length]\nprint(last_element)\n\n##or values[length(values)]\n\n```\n\n#### Question 19: Multiple Matches\n\nYou have a character vector words <- c(\"apple\", \"banana\", \"cherry\", \"apple\"). Write R code to find and print the indices of all occurrences of the word \"apple.\"\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\nwords <- c(\"apple\", \"banana\", \"cherry\", \"apple\")\n\n# Find indices of all occurrences of \"apple\"\n#apple_indices <- which(words == \"apple\")\n#Non-consecutive indices\n\nindice <- which(words == \"apple\")\nprint(indice)\n\n\n\n#another method \nwords=c(\"apple\", \"banana\", \"cherry\", \"apple\")\nwords[x] == 'apple'\napple_indices=vector(\"logical\")\nfor (apple_indices in words){\n  #print(apple_indices)\n  if (apple_indices == \"apple\"){\n    print(apple_indices)\n    apple_indices<-c(\"apple\",TRUE)}\n  else{\n    apple_indices<-c(\"apple\",FALSE)}\n  print(\"---check\")\n  print(apple_indices)\n}\nprint(words[apple_indices==TRUE])\n\n```\n\n#### Question 20: Conditional Capture\n\nAssume you have a vector ages containing the ages of individuals. Write R code to extract and print the ages of individuals who are older than 30.\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\nages <- c(25, 45, 32, 28, 55, 40)\n\n# Extract ages of individuals older than 30\nolder_than_30 <- ages[ages > 30]\n\n# Print the ages\nprint(older_than_30)\n```\n\n#### Question 21: Extract Every Nth\n\nGiven a numeric vector sequence <- 1:20, write R code to extract and print every third element of the vector.\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\n# Numeric vector from 1 to 20\nsequence<-1:20\n\n# Extract and print every third element\nevery_third <- sequence[seq(from = 3, to = length(sequence), by = 3)]\n\n# Print the extracted elements\nprint(every_third)\n```\n\n#### Question 22: Range Retrieval\n\nCreate a numeric vector numbers with values from 1 to 10. Write R code to extract and print the values between the fourth and eighth elements.\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\n# Create a numeric vector from 1 to 10\nnumbers <- 1:10\n\n# Extract and print values between the fourth and eighth elements\nbetween_fourth_and_eighth <- numbers[4:8]\n\n# Print the extracted values\nprint(between_fourth_and_eighth)\n```\n\n#### Question 23: Missing Matters\n\nSuppose you have a numeric vector data <- c(10, NA, 15, 20). Write R code to check if the second element of the vector is missing (NA).\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\n# Numeric vector with NA\ndata <- c(10, NA, 15, 20)\ndata[2]\n# Check if the second element is NA\nis_second_element_missing <- is.na(data[2])\n\n# Print the result\nprint(is_second_element_missing)\n\n```\n\n#### Question 24: Temperature Extremes\n\nAssume you have a numeric vector temperatures with daily temperatures. Create a logical vector hot_days that flags days with temperatures above 90 degrees Fahrenheit. Print the total number of hot days.\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\n# Numeric vector of daily temperatures\ntemperatures <- c(88, 92, 87, 95, 89, 92, 91, 86, 93, 97, 88, 99, 84, 88, 92)\n\n# Create a logical vector to flag hot days\nhot_days <- temperatures > 90\n\n# Count the total number of hot days\ntotal_hot_days <- sum(hot_days, na.rm = TRUE)\n\n# Print the total number of hot days\nprint(total_hot_days)\n\n#another method\ndaily_temp=c(88, 92, 87, 95, 89, 92, 91, 86, 93, 97, 88, 99, 84, 88, 92)\nhot_days=vector(\"logical\")\nfor (temp in daily_temp){#temp is all element\n  if (temp>90){\n    hot_days<-c(hot_days,TRUE)}\n  else{\n    hot_days<-c(hot_days,FALSE)}\n}\nlength(hot_days[hot_days==TRUE])\n  \n#another method\nhot_days= as.logical(daily_temp[daily_temp>90])\nlength(hot_days)\n\n\n```\n\n#### Question 25: String Selection\n\nGiven a character vector fruits containing fruit names, create a logical vector long_names that identifies fruits with names longer than 6 characters. Print the long fruit names.\n\n**Solution:** \n\n```{r, eval=FALSE,echo=TRUE}\n# Character vector of fruit names\nfruits <- c(\"apple\", \"banana\", \"strawberry\", \"kiwi\", \"blueberry\", \"orange\", \"grape\")\n\n# Create a logical vector to identify long fruit names\nlong_names <- nchar(fruits) > 6\n\n# Print the long fruit names\nprint(fruits[long_names])\n\n```\n\n#### Question 26: Data Divisibility\n\nGiven a numeric vector numbers, create a logical vector divisible_by_5 to indicate numbers that are divisible by 5. Print the numbers that satisfy this condition.\n\n**Solution:** \n\n```{r, eval=FALSE,echo=TRUE}\n# Numeric vector of numbers\nnumbers <- c(10, 25, 14, 15, 30, 8, 20, 16)\n\n# Create a logical vector to indicate numbers divisible by 5\ndivisible_by_5 <- numbers %% 5 == 0\n\n# Print the numbers that are divisible by 5\nprint(numbers[divisible_by_5])\n\n```\n\n#### Question 27: Bigger or Smaller?\n\nYou have two numeric vectors vector1 and vector2. Create a logical vector comparison to indicate whether each element in vector1 is greater than the corresponding element in vector2. Print the comparison results.\n\n**Solution:** \n\n```{r, eval=FALSE,echo=TRUE}\n# Sample numeric vectors\nvector1 <- c(10, 25, 14, 15, 30)\nvector2 <- c(8, 20, 12, 10, 25)\n\n# Create a logical vector for comparison\ncomparison <- vector1 > vector2\n\n# Print the comparison results\nprint(comparison)\n```\n\n","srcMarkdownNoYaml":"\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\n```\n\n<style>\np.comment {\nbackground-color: #DBDBDB;\npadding: 10px;\nborder: 1px solid black;\nmargin-left: 25px;\nborder-radius: 5px;\nfont-style: italic;\n}\n\n</style>\n\n## I. Questions\n\n#### Question 1: Emoji Expressions\n\nImagine you're analyzing social media posts for sentiment analysis. If you were to create a variable named \"postSentiment\" to store the sentiment of a post using emojis (üòÑ for positive, üòê for neutral, üò¢ for negative), what data type would you assign to this variable? Why? (_narrative type question, no code required_)\n\n**Solution:**  Since the emojis represent positive, neutral and negative, they represents catergories with order, thus they are ordinal categoric data which are normally character. Since we are using \"postSentiment\", it would likely to be assigned the data type of \"string\".\n\n\n#### Question 2: Hashtag Havoc\n\nIn a study on trending hashtags, you want to store the list of hashtags associated with a post. What data type would you choose for the variable \"postHashtags\"? How might this data type help you analyze and categorize the hashtags later? (_narrative type question, no code required_)\n\n**Solution:**  postHashtags would likely to be datatype \"list\" or character string. Element in a list can be named and list are useful for storing hashtags since they can vary in number and their order of appearance may be important. Therefore, with list, one can categories the data based on criteria and iterate through the list, tally up the occurrence of each hashtag and identify trends and patterns.\n\n\n#### Question 3: Time Traveler's Log\n  \nYou're examining the timing of user interactions on a website. Would you use a numeric or non-numeric data type to represent the timestamp of each interaction? Explain your choice (_narrative type question, no code required_)\n\n**Solution:** I would use numeric data type since timestamps inherently involve a sequential order and time increase in ascending or descending order. It has numbers with decimal values.\n\n\n#### Question 4: Event Elegance\n\nYou're managing an event database that includes the date and time of each session. What data type(s) would you use to represent the session date and time? (_narrative type question, no code required_)\n\n**Solution:**  I would use a continuous numeric datatype because time and date are numerical values, it is continuous and has order of progression of time. Using numeric datatype, one will be able to store and manipulate time-related data easily.\n\n#### Question 5: Nominee Nominations\nYou're analyzing nominations for an online award. Each participant can nominate multiple candidates. What data type would be suitable for storing the list of nominated candidates for each participant?  (_narrative type question, no code required_)\n\n**Solution:**  Since each participants can nominate multiple candidates,  using list data type can elicit names in the list, retrieve the element specifically named and truncated list. \n\n\n#### Question 6: Communication Channels\nIn a survey about preferred communication channels, respondents choose from options like \"email,\" \"phone,\" or \"social media.\" What data type would you assign to the variable \"preferredChannel\"? (_narrative type question, no code required_)\n\n**Solution:** I woudl assign categoric data type for \"preferredChannel\" since categorical dat type is used to represent data that has distinct categories without any inherent order. Since \"email\",\"phone\", \"social media\" are discrete, \"preferredChannel\" variable is suitable because it accurately reflects the data without implying any sort of numeric relationship.\n\n#### Question 7: Colorful Commentary\n\nIn a design feedback survey, participants are asked to describe their feelings about a website using color names (e.g., \"warm red,\" \"cool blue\"). What data type would you choose for the variable \"feedbackColor\"? (_narrative type question, no code required_)\n\n**Solution:**  Since the color names are \"red\" and \"blue\", they are Categoric variables and they are nominal as they do not have natural ordering. Therefore their type is character or logical. But in this case, it should be string of characters. \n\n#### Question 8: Variable Exploration\n\nImagine you're conducting a study on social media usage. Identify three variables related to this study, and specify their data types in R. Classify each variable as either numeric or non-numeric.\n\n**Solution:**   \nVariable 1: Number of followers\nData type: Numeric (integer; whole number)\n\nVariable 2: Time spent on social media\nData type: Numeric (Double; decimal values)\n\nVariable 3: Favourite social media platform\nData type: Catgoric character (String; non-numeric)\n\n#### Question 9: Vector Variety\n\nCreate a numeric vector named \"ages\" containing the ages of five people: 25, 30, 22, 28, and 33. Print the vector.\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\nages<- c(25L,30L,22L,28L,33L)\nprint(ages)\n```\n\n#### Question 10: List Logic\n\nConstruct a list named \"student_info\" that contains the following elements:\n\n  - A character vector of student names: \"Alice,\" \"Bob,\" \"Catherine\"\n\n  - A numeric vector of their respective scores: 85, 92, 78\n\n  - A logical vector indicating if they passed the exam: TRUE, TRUE, FALSE\n\nPrint the list.\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\nstudent_info<-list (name=c(\"Alice\",\"Bob\",\"Catherine\"), scores=c(85,92,78),passed_exam=c(TRUE,TRUE,FALSE))\nprint(student_info)\n```\n\n#### Question 11: Type Tracking\n\nYou have a vector \"data\" containing the values 10, 15.5, \"20\", and TRUE. Determine the data types of each element using the typeof() function.\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\n# Create a vector\nx <- c(10L)\n# Check the type of x\ntypeof(x)\n# Add a character to the vector\nx <- c(x,15.5)\n# Check the type of x\ntypeof(x)\n# Add a character to the vector\nx <- c(x,\"20\")\n# Check the type of x\ntypeof(x)\n# Add a character to the vector\nx <- c(TRUE)\n# Check the type of x\ntypeof(x)\n```\n\n#### Question 12: Coercion Chronicles\n\nYou have a numeric vector \"prices\" with values 20.5, 15, and \"25\". Use explicit coercion to convert the last element to a numeric data type. Print the updated vector.\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\nprices <- c(20.5, 15, \"25\")\n\n# Convert the last element to a numeric data type\nprices[3] <- as.numeric(prices[3])\n\n```\n\n#### Question 13: Implicit Intuition\n\nCombine the numeric vector c(5, 10, 15) with the character vector c(\"apple\", \"banana\", \"cherry\"). What happens to the data types of the combined vector? Explain the concept of implicit coercion.\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\nnumeric_vector <- c(5, 10, 15)\ncharacter_vector <- c(\"apple\", \"banana\", \"cherry\")\ncombined_vector <- c(numeric_vector, character_vector)\n\nprint(combined_vector)\nprint(typeof(combined_vector))\n```\nThe data types of the combined vector will be implicitly coerced to a common data type. In this case, the resulting vector will be a characater data type due to the presence of character vector, hence R convert the numeric data type to character data type based on its content.\n\n\n#### Question 14: Coercion Challenges\n\nYou have a vector \"numbers\" with values 7, 12.5, and \"15.7\". Calculate the sum of these numbers. Will R automatically handle the data type conversion? If not, how would you handle it?\n\n**Solution:** \nMixing different data types (numeric and character) in arithmetic operations, R will not automatically handle the data type conversion. Since R will not be able to automatically handle the data type conversion, I need to use explicit coercion to convert the character into numeric using as.numeric.\n```{r, eval=TRUE,echo=TRUE}\n numbers <- c(7, 12.5, \"15.7\")\n\n# Convert character elements to numeric\nnumbers <- as.numeric(numbers)\n\n# Calculate the sum\nsum_result <- sum(numbers)\n\n#simplify \n#sum(as.numeric(numbers))\n\nprint(sum_result)\n```\n\n#### Question 15: Coercion Consequences\n\nSuppose you want to calculate the average of a vector \"grades\" with values 85, 90.5, and \"75.2\". If you directly calculate the mean using the mean() function, what result do you expect? How might you ensure accurate calculation?\n\n**Solution:** \nIf I directly calculate the mean of the vector \"grades\" with values 85, 90.5, and \"75.2\" using the mean() function without any data type conversion,can lead to incorrect results such as 85. \nAs shown here,\nmean(85,90.5,\"75.2\")\n[1] 85 OR\ngrades <- c(85, 90.5, \"75.2\")\nmean(grades)\n[1] NA\nMean() function requires the input vector to contain only numeric values.\n```{r, eval=TRUE,echo=TRUE}\ngrades <- c(85, 90.5, \"75.2\")\n\n# Convert character element to numeric\ngrades <- as.numeric(grades)\n\n# Calculate the mean\nmean_result <- mean(grades)\n\n# Simplify\n#mean_result <- mean(as.numeric(grades))\nprint(mean_result)\n```\n\n#### Question 16: Data Diversity in Lists\n\nCreate a list named \"mixed_data\" with the following components:\n\n  - A numeric vector: 10, 20, 30\n  \n  - A character vector: \"red\", \"green\", \"blue\"\n\n  - A logical vector: TRUE, FALSE, TRUE\n  \nCalculate the mean of the numeric vector within the list.\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\n# Creating the list with different components\nmixed_data <- list(numeric_vector = c(10, 20, 30),character_vector = c(\"red\", \"green\", \"blue\"),logical_vector = c(TRUE, FALSE, TRUE))\n\n# Calculate the mean of the numeric vector within the list\nmean_numeric <- mean(mixed_data$numeric_vector)\n#Another way to calculate the mean of the numeric vector within the list\n#mean_numeric <- mean(mixed_data[[\"numeric_vector\"]])\nprint(mean_numeric)\n\n```\n\n#### Question 17: List Logic Follow-up\n\nUsing the \"student_info\" list from Question 10, extract and print the score of the student named \"Bob.\"\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\n# Assuming you have the \"student_info\" list defined from Question 10\nstudent_info<-list(names = c(\"Alice\", \"Bob\", \"Catherine\"),scores = c(85, 92, 78),passed_exam = c(TRUE, TRUE, FALSE))\n\n# Extract and print the score of the student named \"Bob\"\nbob_score<-student_info$scores[student_info$names == \"Bob\"]\n\n#To find out the number of people who pass the exam\n#length((student_info$names[student_info$scores[student_info$passed_exam==\"TRUE\"]]))\n\n#To find out who pass the exam\n#> student_passed<-c(list(student_info$names[student_info$scores[student_info$passed_exam==\"TRUE\"]]))\n#> return NA, need to solve\n\nprint(bob_score)\n\n```\n\n#### Question 18: Dynamic Access\n\nCreate a numeric vector values with random values. Write R code to dynamically access and print the last element of the vector, regardless of its length.\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\n# Create a numeric vector with random random values\n# values <- runif(10, min = 0, max = 100)\n\n# Create a numeric vector with random fixed values\nvalues <- c(10, 20, 30, 40, 50)\n\n# Get the length of the vector\nvector_length <- length(values)\n\n# Access and print the last element dynamically\nlast_element <- values[vector_length]\nprint(last_element)\n\n##or values[length(values)]\n\n```\n\n#### Question 19: Multiple Matches\n\nYou have a character vector words <- c(\"apple\", \"banana\", \"cherry\", \"apple\"). Write R code to find and print the indices of all occurrences of the word \"apple.\"\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\nwords <- c(\"apple\", \"banana\", \"cherry\", \"apple\")\n\n# Find indices of all occurrences of \"apple\"\n#apple_indices <- which(words == \"apple\")\n#Non-consecutive indices\n\nindice <- which(words == \"apple\")\nprint(indice)\n\n\n\n#another method \nwords=c(\"apple\", \"banana\", \"cherry\", \"apple\")\nwords[x] == 'apple'\napple_indices=vector(\"logical\")\nfor (apple_indices in words){\n  #print(apple_indices)\n  if (apple_indices == \"apple\"){\n    print(apple_indices)\n    apple_indices<-c(\"apple\",TRUE)}\n  else{\n    apple_indices<-c(\"apple\",FALSE)}\n  print(\"---check\")\n  print(apple_indices)\n}\nprint(words[apple_indices==TRUE])\n\n```\n\n#### Question 20: Conditional Capture\n\nAssume you have a vector ages containing the ages of individuals. Write R code to extract and print the ages of individuals who are older than 30.\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\nages <- c(25, 45, 32, 28, 55, 40)\n\n# Extract ages of individuals older than 30\nolder_than_30 <- ages[ages > 30]\n\n# Print the ages\nprint(older_than_30)\n```\n\n#### Question 21: Extract Every Nth\n\nGiven a numeric vector sequence <- 1:20, write R code to extract and print every third element of the vector.\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\n# Numeric vector from 1 to 20\nsequence<-1:20\n\n# Extract and print every third element\nevery_third <- sequence[seq(from = 3, to = length(sequence), by = 3)]\n\n# Print the extracted elements\nprint(every_third)\n```\n\n#### Question 22: Range Retrieval\n\nCreate a numeric vector numbers with values from 1 to 10. Write R code to extract and print the values between the fourth and eighth elements.\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\n# Create a numeric vector from 1 to 10\nnumbers <- 1:10\n\n# Extract and print values between the fourth and eighth elements\nbetween_fourth_and_eighth <- numbers[4:8]\n\n# Print the extracted values\nprint(between_fourth_and_eighth)\n```\n\n#### Question 23: Missing Matters\n\nSuppose you have a numeric vector data <- c(10, NA, 15, 20). Write R code to check if the second element of the vector is missing (NA).\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\n# Numeric vector with NA\ndata <- c(10, NA, 15, 20)\ndata[2]\n# Check if the second element is NA\nis_second_element_missing <- is.na(data[2])\n\n# Print the result\nprint(is_second_element_missing)\n\n```\n\n#### Question 24: Temperature Extremes\n\nAssume you have a numeric vector temperatures with daily temperatures. Create a logical vector hot_days that flags days with temperatures above 90 degrees Fahrenheit. Print the total number of hot days.\n\n**Solution:** \n\n```{r, eval=TRUE,echo=TRUE}\n# Numeric vector of daily temperatures\ntemperatures <- c(88, 92, 87, 95, 89, 92, 91, 86, 93, 97, 88, 99, 84, 88, 92)\n\n# Create a logical vector to flag hot days\nhot_days <- temperatures > 90\n\n# Count the total number of hot days\ntotal_hot_days <- sum(hot_days, na.rm = TRUE)\n\n# Print the total number of hot days\nprint(total_hot_days)\n\n#another method\ndaily_temp=c(88, 92, 87, 95, 89, 92, 91, 86, 93, 97, 88, 99, 84, 88, 92)\nhot_days=vector(\"logical\")\nfor (temp in daily_temp){#temp is all element\n  if (temp>90){\n    hot_days<-c(hot_days,TRUE)}\n  else{\n    hot_days<-c(hot_days,FALSE)}\n}\nlength(hot_days[hot_days==TRUE])\n  \n#another method\nhot_days= as.logical(daily_temp[daily_temp>90])\nlength(hot_days)\n\n\n```\n\n#### Question 25: String Selection\n\nGiven a character vector fruits containing fruit names, create a logical vector long_names that identifies fruits with names longer than 6 characters. Print the long fruit names.\n\n**Solution:** \n\n```{r, eval=FALSE,echo=TRUE}\n# Character vector of fruit names\nfruits <- c(\"apple\", \"banana\", \"strawberry\", \"kiwi\", \"blueberry\", \"orange\", \"grape\")\n\n# Create a logical vector to identify long fruit names\nlong_names <- nchar(fruits) > 6\n\n# Print the long fruit names\nprint(fruits[long_names])\n\n```\n\n#### Question 26: Data Divisibility\n\nGiven a numeric vector numbers, create a logical vector divisible_by_5 to indicate numbers that are divisible by 5. Print the numbers that satisfy this condition.\n\n**Solution:** \n\n```{r, eval=FALSE,echo=TRUE}\n# Numeric vector of numbers\nnumbers <- c(10, 25, 14, 15, 30, 8, 20, 16)\n\n# Create a logical vector to indicate numbers divisible by 5\ndivisible_by_5 <- numbers %% 5 == 0\n\n# Print the numbers that are divisible by 5\nprint(numbers[divisible_by_5])\n\n```\n\n#### Question 27: Bigger or Smaller?\n\nYou have two numeric vectors vector1 and vector2. Create a logical vector comparison to indicate whether each element in vector1 is greater than the corresponding element in vector2. Print the comparison results.\n\n**Solution:** \n\n```{r, eval=FALSE,echo=TRUE}\n# Sample numeric vectors\nvector1 <- c(10, 25, 14, 15, 30)\nvector2 <- c(8, 20, 12, 10, 25)\n\n# Create a logical vector for comparison\ncomparison <- vector1 > vector2\n\n# Print the comparison results\nprint(comparison)\n```\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":"html_document","warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"toc":true,"output-file":"Challenge-3.1.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.353","editor":"visual","theme":"Morph","title":"Challenge-3","author":"Tang Ching Xian","date":"27/08/2023"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}