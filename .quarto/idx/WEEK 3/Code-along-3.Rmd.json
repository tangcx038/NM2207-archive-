{"title":"Week-3: Code-along","markdown":{"yaml":{"title":"Week-3: Code-along","author":"Tang Ching Xian","date":"25/8/2023","output":{"html_document":null,"df_print":"paged"},"pdf_document":"default"},"headingText":"I. Code to edit and execute","containsRefs":false,"markdown":"\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\n```\n\n\n\n**To be submitted on canvas before attending the tutorial**\n\n\n### Loading packages\n\n```{r, eval=TRUE,echo=TRUE}\n# Load package tidyverse\nlibrary(tidyverse)\n```\n\n### Assigning values to variables\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Example a.: execute this example\nx <- 'A'\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Complete the code for Example b and execute it\nx <- \"Apple\"\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Complete the code for Example c and execute it\nx <- FALSE\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Complete the code for Example d and execute it\nX <- 5L\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Complete the code for Example e and execute it\nx <- 5\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Complete the code for Example f and execute it\nx <- 1i\n```\n\n### Checking the type of variables\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Example a.: execute this example\nx <- 'A'\ntypeof(x)\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Complete the code for Example b and execute it\nx <- \"Apple\"\ntypeof(x)\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Complete the code for Example c and execute it\nx <- FALSE\ntypeof(x)\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Complete the code for Example d and execute it\nx <- 5L\ntypeof(x)\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Complete the code for Example e and execute it\nx <- 5\ntypeof(x)\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Complete the code for Example f and execute it\nx <- 1i\ntypeof(x)\n```\n\n### Need for data types\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# import the cat-lovers data from the csv file you downloaded from canvas\nread.csv(\"cat-lovers.csv\")\ncat_lovers <- read.csv(\"cat-lovers.csv\")\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Compute the mean of the number of cats: execute this command\nmean(cat_lovers$number_of_cats)\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Get more information about the mean() command using ? operator\n?mean\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Convert the variable number_of_cats using as.integer()\nmean(as.integer(cat_lovers$number_of_cats))\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Display the elements of the column number_of_cats \ncat_lovers$number_of_cats\nas.integer(cat_lovers$number_of_cats)\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Display the elements of the column number_of_cats after converting it using as.numeric()\nas.numeric(cat_lovers$number_of_cats)\n```\n\n### Create an empty vector\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Empty vector\nx <- vector()\n# Type of the empty vector\ntypeof(x)\n```\n\n### Create vectors of type logical\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Method 1\nx<-vector(\"logical\",length=5)\n# Display the contents of x\nprint(x)\n# Display the type of x\nprint(typeof(x))\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Method 2\nx<-logical(5)\n# Display the contents of x\nprint(x)\n# Display the type of x\nprint(typeof(x))\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Method 3\nx<-c(TRUE,FALSE,TRUE,FALSE,TRUE)\n# Display the contents of x\nprint(x)\n# Display the type of x\nprint(typeof(x))\n```\n\n### Create vectors of type character\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Method 1\nx<-vector(\"character\",length=5)\n# Display the contents of x\nprint(X)\n# Display the type of x\nprint(typeof(x))\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Method 2\nx<-character(5)\n# Display the contents of x\nprint(x)\n# Display the type of x\nprint(typeof(x))\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Method 3\nx<-c('A','b','r','q')\n# Display the contents of x\nprint(x)\n# Display the type of x\nprint(typeof(x))\n```\n\n### Create vectors of type integer\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Method 1\nx<-vector(\"integer\",length=5)\n# Display the contents of x\nprint(x)\n# Display the type of x\nprint(typeof(x))\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Method 2\nx<-integer(5)\n# Display the contents of x\nprint(x)\n# Display the type of x\nprint(typeof(x))\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Method 3\nx<-c(1,2,3,4,5)\n# Display the contents of x\nprint(x)\n# Display the type of x\nprint(typeof(x))\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Method 4\nx<-seq(from=1,to=5,by=0.1)\n# Display the contents of x\nprint(x)\n# Display the type of x\nprint(typeof(x))\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Method 5\nx<-1:5\n# Display the contents of x\nprint(x)\n# Display the type of x\nprint(typeof(x))\n```\n\n### Create vectors of type double\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Method 1\nx<-vector(\"double\",length=5)\n# Display the contents of x\nprint(x)\n# Display the type of x\nprint(typeof(x))\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Method 2\nx<-double(5)\n# Display the contents of x\nprint(x)\n# Display the type of x\nprint(typeof(x))\n```\n\n```{r,warning=TRUE,message=FALSE,eval=TRUE,echo=TRUE}\n# Method 3\nx<-c(1.787,0.63573,2.3890)\n# Display the contents of x\nprint(x)\n# Display the type of x\nprint(typeof(x))\n```\n\n### Implicit coercion\n\n#### Example 1\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Create a vector\nx <- c(1.8)\n# Check the type of x\ntypeof(x)\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Add a character to the vector\nx <- c(x,'a')\n# Check the type of x\ntypeof(x)\n```\n\n#### Example 2\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\nx <- c(TRUE)\n# Check the type of x\ntypeof(x)\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Add a number to the vector\nx <- c(x,2)\n# Check the type of x\ntypeof(x)\n```\n\n#### Example 3\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\nx <- c('a')\n# Check the type of x\ntypeof(x)\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\nx <- c(x,TRUE)\n# Check the type of x\ntypeof(x)\n```\n\n\n#### Example 4\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\nx <- c(1L)\n# Check the type of x\ntypeof(x)\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\nx <- c(x,2)\n# Check the type of x\ntypeof(x)\n```\n\n### Explicit coercion\n\n#### Example 1\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Create a vector\nx <- c(1L)\n# Check the type of x\ntypeof(x)\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Convert the vector to type character\nx <- as.character(x)\n# Check the type of x\ntypeof(x)\n```\n\n#### Example 2\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Create a vector\nx <- c('A')\n# Check the type of x\ntypeof(x)\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Convert the vector to type character\nx <- as.numeric(x)\n# Check the type of x\ntypeof(x)\n```\n\n### Accessing elements of the vector\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Create a vector\nx <- c(1,10,9,8,1,3,5)\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Access one element with index 3\nx[3]\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Access elements with consecutive indices, 2 to 4: 2,3,4\nx[2:4]\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Access elements with non-consecutive indices, 1,3,5\nx[c(1,3,5)]\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Access elements using logical vector\nx[c(TRUE,FALSE,FALSE,TRUE,FALSE,FALSE,TRUE)]\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Access elements using the conditional operator <\nx[x<10]\n```\n\n### Examining vectors\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Display the length of the vector\nprint(length(x))\n# Display the type of the vector\nprint(typeof(x))\n# Display the structure of the vector\nprint(str(x))\n```\n\n### Lists\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Initialise a named list\nmy_pie = list(type=\"key lime\", diameter=7, is.vegetarian=TRUE)\n# display the list\nmy_pie\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Print the names of the list\nprint(names(my_pie))\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Retrieve the element named type\nmy_pie$type\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Retrieve a truncated list\nmy_pie[\"type\"]\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Retrieve the element named type\nmy_pie[[\"type\"]]\n```\n\n#### Exploring data-sets\n\n```{r,warning=TRUE,message=FALSE,eval=TRUE,echo=TRUE}\n# Install package--> When i enter install.packages(\"openintro\"), unable to knit\n# Load the package\nlibrary(openintro)\n# Loading required package: airports\nlibrary(airports)\n## Loading required package: cherryblossom\nlibrary(cherryblossom)\n## Loading required package: usdata\nlibrary(usdata)\n# Load package\nlibrary(tidyverse)\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Catch a glimpse of the data-set: see how the rows are stacked one below another\nglimpse(loans_full_schema)\n```\n\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Selecting numeric variables\nloans <- loans_full_schema %>% # <-- pipe operator\n  select(paid_total, term, interest_rate,\n         annual_income,paid_late_fees,debt_to_income)\n# View the columns stacked one below another\nglimpse(loans)\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Selecting categoric variables\nloans <- loans_full_schema %>% \n  select( ) # type the chosen columns as in the lecture slide\n# View the columns stacked one below another\nglimpse(loans)\n```","srcMarkdownNoYaml":"\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\n```\n\n\n# I. Code to edit and execute\n\n**To be submitted on canvas before attending the tutorial**\n\n\n### Loading packages\n\n```{r, eval=TRUE,echo=TRUE}\n# Load package tidyverse\nlibrary(tidyverse)\n```\n\n### Assigning values to variables\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Example a.: execute this example\nx <- 'A'\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Complete the code for Example b and execute it\nx <- \"Apple\"\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Complete the code for Example c and execute it\nx <- FALSE\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Complete the code for Example d and execute it\nX <- 5L\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Complete the code for Example e and execute it\nx <- 5\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Complete the code for Example f and execute it\nx <- 1i\n```\n\n### Checking the type of variables\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Example a.: execute this example\nx <- 'A'\ntypeof(x)\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Complete the code for Example b and execute it\nx <- \"Apple\"\ntypeof(x)\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Complete the code for Example c and execute it\nx <- FALSE\ntypeof(x)\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Complete the code for Example d and execute it\nx <- 5L\ntypeof(x)\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Complete the code for Example e and execute it\nx <- 5\ntypeof(x)\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Complete the code for Example f and execute it\nx <- 1i\ntypeof(x)\n```\n\n### Need for data types\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# import the cat-lovers data from the csv file you downloaded from canvas\nread.csv(\"cat-lovers.csv\")\ncat_lovers <- read.csv(\"cat-lovers.csv\")\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Compute the mean of the number of cats: execute this command\nmean(cat_lovers$number_of_cats)\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Get more information about the mean() command using ? operator\n?mean\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Convert the variable number_of_cats using as.integer()\nmean(as.integer(cat_lovers$number_of_cats))\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Display the elements of the column number_of_cats \ncat_lovers$number_of_cats\nas.integer(cat_lovers$number_of_cats)\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Display the elements of the column number_of_cats after converting it using as.numeric()\nas.numeric(cat_lovers$number_of_cats)\n```\n\n### Create an empty vector\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Empty vector\nx <- vector()\n# Type of the empty vector\ntypeof(x)\n```\n\n### Create vectors of type logical\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Method 1\nx<-vector(\"logical\",length=5)\n# Display the contents of x\nprint(x)\n# Display the type of x\nprint(typeof(x))\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Method 2\nx<-logical(5)\n# Display the contents of x\nprint(x)\n# Display the type of x\nprint(typeof(x))\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Method 3\nx<-c(TRUE,FALSE,TRUE,FALSE,TRUE)\n# Display the contents of x\nprint(x)\n# Display the type of x\nprint(typeof(x))\n```\n\n### Create vectors of type character\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Method 1\nx<-vector(\"character\",length=5)\n# Display the contents of x\nprint(X)\n# Display the type of x\nprint(typeof(x))\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Method 2\nx<-character(5)\n# Display the contents of x\nprint(x)\n# Display the type of x\nprint(typeof(x))\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Method 3\nx<-c('A','b','r','q')\n# Display the contents of x\nprint(x)\n# Display the type of x\nprint(typeof(x))\n```\n\n### Create vectors of type integer\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Method 1\nx<-vector(\"integer\",length=5)\n# Display the contents of x\nprint(x)\n# Display the type of x\nprint(typeof(x))\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Method 2\nx<-integer(5)\n# Display the contents of x\nprint(x)\n# Display the type of x\nprint(typeof(x))\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Method 3\nx<-c(1,2,3,4,5)\n# Display the contents of x\nprint(x)\n# Display the type of x\nprint(typeof(x))\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Method 4\nx<-seq(from=1,to=5,by=0.1)\n# Display the contents of x\nprint(x)\n# Display the type of x\nprint(typeof(x))\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Method 5\nx<-1:5\n# Display the contents of x\nprint(x)\n# Display the type of x\nprint(typeof(x))\n```\n\n### Create vectors of type double\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Method 1\nx<-vector(\"double\",length=5)\n# Display the contents of x\nprint(x)\n# Display the type of x\nprint(typeof(x))\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Method 2\nx<-double(5)\n# Display the contents of x\nprint(x)\n# Display the type of x\nprint(typeof(x))\n```\n\n```{r,warning=TRUE,message=FALSE,eval=TRUE,echo=TRUE}\n# Method 3\nx<-c(1.787,0.63573,2.3890)\n# Display the contents of x\nprint(x)\n# Display the type of x\nprint(typeof(x))\n```\n\n### Implicit coercion\n\n#### Example 1\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Create a vector\nx <- c(1.8)\n# Check the type of x\ntypeof(x)\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Add a character to the vector\nx <- c(x,'a')\n# Check the type of x\ntypeof(x)\n```\n\n#### Example 2\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\nx <- c(TRUE)\n# Check the type of x\ntypeof(x)\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Add a number to the vector\nx <- c(x,2)\n# Check the type of x\ntypeof(x)\n```\n\n#### Example 3\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\nx <- c('a')\n# Check the type of x\ntypeof(x)\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\nx <- c(x,TRUE)\n# Check the type of x\ntypeof(x)\n```\n\n\n#### Example 4\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\nx <- c(1L)\n# Check the type of x\ntypeof(x)\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\nx <- c(x,2)\n# Check the type of x\ntypeof(x)\n```\n\n### Explicit coercion\n\n#### Example 1\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Create a vector\nx <- c(1L)\n# Check the type of x\ntypeof(x)\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Convert the vector to type character\nx <- as.character(x)\n# Check the type of x\ntypeof(x)\n```\n\n#### Example 2\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Create a vector\nx <- c('A')\n# Check the type of x\ntypeof(x)\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Convert the vector to type character\nx <- as.numeric(x)\n# Check the type of x\ntypeof(x)\n```\n\n### Accessing elements of the vector\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Create a vector\nx <- c(1,10,9,8,1,3,5)\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Access one element with index 3\nx[3]\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Access elements with consecutive indices, 2 to 4: 2,3,4\nx[2:4]\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Access elements with non-consecutive indices, 1,3,5\nx[c(1,3,5)]\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Access elements using logical vector\nx[c(TRUE,FALSE,FALSE,TRUE,FALSE,FALSE,TRUE)]\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Access elements using the conditional operator <\nx[x<10]\n```\n\n### Examining vectors\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Display the length of the vector\nprint(length(x))\n# Display the type of the vector\nprint(typeof(x))\n# Display the structure of the vector\nprint(str(x))\n```\n\n### Lists\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Initialise a named list\nmy_pie = list(type=\"key lime\", diameter=7, is.vegetarian=TRUE)\n# display the list\nmy_pie\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Print the names of the list\nprint(names(my_pie))\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Retrieve the element named type\nmy_pie$type\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Retrieve a truncated list\nmy_pie[\"type\"]\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Retrieve the element named type\nmy_pie[[\"type\"]]\n```\n\n#### Exploring data-sets\n\n```{r,warning=TRUE,message=FALSE,eval=TRUE,echo=TRUE}\n# Install package--> When i enter install.packages(\"openintro\"), unable to knit\n# Load the package\nlibrary(openintro)\n# Loading required package: airports\nlibrary(airports)\n## Loading required package: cherryblossom\nlibrary(cherryblossom)\n## Loading required package: usdata\nlibrary(usdata)\n# Load package\nlibrary(tidyverse)\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Catch a glimpse of the data-set: see how the rows are stacked one below another\nglimpse(loans_full_schema)\n```\n\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Selecting numeric variables\nloans <- loans_full_schema %>% # <-- pipe operator\n  select(paid_total, term, interest_rate,\n         annual_income,paid_late_fees,debt_to_income)\n# View the columns stacked one below another\nglimpse(loans)\n```\n\n```{r,warning=TRUE,message=TRUE,eval=TRUE,echo=TRUE}\n# Selecting categoric variables\nloans <- loans_full_schema %>% \n  select( ) # type the chosen columns as in the lecture slide\n# View the columns stacked one below another\nglimpse(loans)\n```"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":{"html_document":null,"df_print":"paged"},"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"toc":true,"output-file":"Code-along-3.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.353","editor":"visual","theme":"Morph","title":"Week-3: Code-along","author":"Tang Ching Xian","date":"25/8/2023","pdf_document":"default"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}