install.packages("airports")
install.packages("airports")
install.packages("airports")
library(airports)
library(cherryblossom)
## Loading required package: usdata
library(usdata)
# Load package
library(tidyverse)
glimpse(loans_full_schema)
glimpse(loans_full_schema)
library(tidyverse)
glimpse(loans_full_schema)
glimpse(loans_full_schema)
install.packages("openintro")
library(openintro)
library(openintro)
glimpse(loans_full_schema)
loans <- loans_full_schema %>% # <-- pipe operator
select(paid_total, term, interest_rate,
annual_income,paid_late_fees,debt_to_income)
install.packages(openintro)
install.packages("openintro")
install.packages("openintro")
install.packages("openintro")
# Install package
install.package("openintro")
install.packages("openintro")
setwd("~/NM2207/WEEK 3")
mean(85, 90.5,"75.2")
grades <- c(85, 90.5, "75.2")
# Convert character element to numeric
grades <- as.numeric(grades)
# Calculate the mean
mean_result <- mean(grades, na.rm = TRUE)
print(mean_result)
grades <- c(85, 90.5, "75.2")
# Convert character element to numeric
grades <- as.numeric(grades)
# Calculate the mean
mean_result <- mean(grades)
print(mean_result)
# Creating the list with different components
mixed_data <- list(
numeric_vector = c(10, 20, 30),
character_vector = c("red", "green", "blue"),
logical_vector = c(TRUE, FALSE, TRUE)
)
# Calculate the mean of the numeric vector within the list
mean_numeric <- mean(mixed_data$numeric_vector)
print(mean_numeric)
# Creating the list with different components
mixed_data <- list(
numeric_vector = c(10, 20, 30),
character_vector = c("red", "green", "blue"),
logical_vector = c(TRUE, FALSE, TRUE)
)
# Calculate the mean of the numeric vector within the list
mean_numeric <- mean(mixed_data$numeric_vector)
# Calculate the mean of the numeric vector within the list
mean_numeric <- mean(mixed_data[["numeric_vector"]]
print(mean_numeric)
mean_numeric <- mean[["numeric_vector"]]
mean_numeric <- mean(mixed_data[["numeric_vector"]])
print mean_numeric
print(mean_numeric)
# Assuming you have the "student_info" list defined from Question 10
student_info <- list(
names = c("Alice", "Bob", "Catherine"),
scores = c(85, 92, 78),
passed_exam = c(TRUE, TRUE, FALSE)
)
# Extract and print the score of the student named "Bob"
bob_score <- student_info$scores[student_info[[name=="Bob"]]]
bob_score <- student_info[[scores[[student_info[[name=="Bob"]]]]]]
bob_score <- student_info[[scores[[student_info[[name=="Bob"]]]]]]
bob_score <- student_info$scores$student_info$names == "Bob"
list(student_info)
list(student_info$names="Bob")
list(student_info$score[[names(Bob))
list(student_info$score[[names(Bob)]]0
> list(student_info$score[[names(Bob)]])
list(student_info$score[[names(Bob)]])
list(student_info$score[[names]])
list(student_info$score[[student_info$names(Bob)]])
student_info$score[[student_info$names(Bob)]]
student_info$score[[student_info$names==Bob]]
student_info$scores[student_info$names == "Bob"]
# Create a numeric vector with random values
values <- runif(10, min = 0, max = 100)
# Get the length of the vector
vector_length <- length(values)
# Access and print the last element dynamically
last_element <- values[vector_length]
print(last_element)
# Create a numeric vector with random values
values <- runif(10, min = 0, max = 100)
# Get the length of the vector
vector_length <- length(values)
# Access and print the last element dynamically
last_element <- values[vector_length]
print(last_element)
# Create a numeric vector with random fixed values
values <- c(10, 20, 30, 40, 50)
# Get the length of the vector
vector_length <- length(values)
# Access and print the last element dynamically
last_element <- values[vector_length]
print(last_element)
# Create a numeric vector with random fixed values
values <- c(10, 20, 30, 40, 50)
# Get the length of the vector
vector_length <- length(values)
# Access and print the last element dynamically
last_element <- values[vector_length]
print(last_element)
words <- c("apple", "banana", "cherry", "apple")
# Find indices of all occurrences of "apple"
apple_indices <- which(words == "apple")
# Print the indices
print(apple_indices)
word[c(1,4)]
word[c(1,4)]
words[c(1,4)]
words[c("apple")]
words[c(apple)]
words["apple"]
words <- c("apple", "banana", "cherry", "apple")
# Find indices of all occurrences of "apple"
#Non-consecutive indices
apple_indices <- words[c("apple")]
# Print the indices#
print(apple_indices)
data <- c(10, NA, 15, 20)
data[2]
numbers <- c(10, 25, 14, 15, 30, 8, 20, 16)
# Create a logical vector to indicate numbers divisible by 5
divisible_by_5 <- numbers %% 5 == 0
ages<- c(25L,30L,22L,28L,33L)
ages
{r, eval=TRUE,echo=TRUE}
student_info<-list (name=c("Alice","Bob","Catherine"), scores=c(85,92,78),passed_exam=c(TRUE,TRUE,FALSE))
print(student_info)
# Create a vector
x <- c(10)
# Check the type of x
typeof(x)
# Add a character to the vector
x <- c(x,15.5)
# Check the type of x
typeof(x)
# Add a character to the vector
x <- c(x,"20")
# Check the type of x
typeof(x)
# Add a character to the vector
x <- c(TRUE)
# Check the type of x
typeof(x)
# Create a vector
x <- c(10L)
# Check the type of x
typeof(x)
student_info<-list (name=c("Alice","Bob","Catherine"), scores=c(85,92,78),passed_exam=c(TRUE,TRUE,FALSE))
print(student_info)
grades <- c(85, 90.5, "75.2")
mean(grades)
mean_result <- mean(as.numeric(grades))
grades <- c(85, 90.5, "75.2")
mean_result <- mean(as.numeric(grades))
print(mean_result)
mean(85,90.5,"75.2")
grades <- c(85, 90.5, "75.2")
mean_result <- mean(as.numeric(grades))
print(mean_result)
mixed_data <- list(numeric_vector = c(10, 20, 30),character_vector = c("red", "green", "blue"),logical_vector = c(TRUE, FALSE, TRUE))
mean_numeric <- mean(mixed_data[["numeric_vector"]])
print(mean_numeric)
student_info<-list(names = c("Alice", "Bob", "Catherine"),scores = c(85, 92, 78),passed_exam = c(TRUE, TRUE, FALSE))
print(bob_score(student_info$scores[student_info$names == "Bob"]))
print
print(student_info$scores[student_info$names == "Bob"])
print(student_info[[scores[student_info$names == "Bob"]]])
list(student_info)
list[[name==Bob]]
names(student_info)$score
names(student_info)
names(student_info)%scores
names(student_info)%scores(student_info)
names(student_info)$scores(student_info)
student_info["names"=Bob]$student_info[score]
student_info["names"==Bob]$student_info[score]
student_info$names==Bob[student_info$score]
student_info$names=="Bob"[student_info$score]
student_info<-list(names = c("Alice", "Bob", "Catherine"),scores = c(85, 92, 78),passed_exam = c(TRUE, TRUE, FALSE))
student_info[["scores"]]
student_info$names==Bob[student_info$scores]
student_info$names=="Bob"[student_info$scores]
list(student_info$names=="Bob")
if list(TRUE),scores$TRUE
List(TRUE),scores$TRUE
list(student_info$names)
list(student_info$names=="Bob"==TRUE)
list(student_info$names=="Bob"$student_info$scores)
strength(student_info$names=="Bob"$student_info$scores)
length(student_info$names=="Bob"=TRUE)
list(student_info$names=="Bob"=TRUE)
list(student_info$scores[student_info$names=="Bob"])
list(student_info$names[student_info$scores=="Bob"])
student_info$passed_exam[student_info$scores[student_info$names=="Bob"]]
student_Bob_Passed<-c(student_info$scores[student_info$names=="Bob"]])
list(student_info$names[student_info$scores[student_info$passed_exam=="TRUE"]]
list(student_info$names[student_info$scores[student_info$passed_exam=="TRUE"]])
Student_passed<-student_info$scores[student_info$passed_exam=="TRUE"]
name((student_info$names[student_info$scores[student_info$passed_exam=="TRUE"]]))
length((student_info$names[student_info$scores[student_info$passed_exam=="TRUE"]]))
Student_passed<-c(student_info$scores[student_info$passed_exam=="TRUE"])
list(student_info$student_passed)
list(student_passed$name)
names_student<- student_info$names[student_info$scores == "TRUE"
names_student<- student_info$names[student_info$scores == "TRUE"]
print(names_student)
)names_student<- c(student_info$names[student_info$scores == "TRUE"]
names_student<- c(student_info$names[student_info$scores == "TRUE"])
print(names_student)
names_student<- as.list(student_info$names[student_info$scores == "TRUE"])
print(names_student)
names_student<- as.character(student_info$names[student_info$scores == "TRUE"])
print(names_student)
list(student_info$names[student_info$scores[student_info$passed_exam==c("TRUE")]])
list(student_info$names[student_info$scores[student_info$passed_exam=="TRUE"]])
list(c(student_info$names[student_info$scores[student_info$passed_exam=="TRUE"]])
list(c(student_info$names[student_info$scores[student_info$passed_exam=="TRUE"]]))
student_passed<-c(list(student_info$names[student_info$scores[student_info$passed_exam=="TRUE"]]))
print(student_passed)
student_passed<-c("list(student_info$names[student_info$scores[student_info$passed_exam=="TRUE"]])")
words <- c("apple", "banana", "cherry", "apple")
# Find indices of all occurrences of "apple"
apple_indices <- words[c("apple")]
# Print the indices#
print(apple_indices)
words <- c("apple", "banana", "cherry", "apple")
apple_indices <- words[c==("apple")]
apple_indices <- words[c=="apple"]
print(apple_indices)
words <- c("apple", "banana", "cherry", "apple")
apple_indices <- words$"apple"
words <- c("apple", "banana", "cherry", "apple")
apple_indices <- words["apple"]
# Print the indices#
print(apple_indices)
words <- c("apple", "banana", "cherry", "apple")
apple_indices <- words[c("apple")]
# Print the indices#
print(apple_indices)
words=c("apple", "banana", "cherry", "apple")
apple_indices=vector("logical")
for (apple_indices in words){
if (words=="apple"){
apple_indices<-c(apple_indices,TRUE)}
else{
apple_indices<-c(apple_indices,FALSE)}
}
words=c("apple", "banana", "cherry", "apple")
apple_indices=vector("logical")
for (apple_indices in words){
if (words=="apple"){
apple_indices<-c("apple",TRUE)}
else{
apple_indices<-c("apple",FALSE)}
}
words=c("apple", "banana", "cherry", "apple")
apple_indices=vector("logical")
for (apple_indices in words){
if (words=="apple"){
apple_indices<-c("apple",TRUE)}
else{
apple_indices<-c("apple",FALSE)}
}
knitr::opts_chunk$set(echo = TRUE)
words <- c("apple", "banana", "cherry", "apple")
# Find indices of all occurrences of "apple"
#apple_indices <- which(words == "apple")
#Non-consecutive indices
indice <- which(words == "apple")
print(indice)
apple_indices <- words[c("apple")]
# Print the indices
print(apple_indices)
#another method
words=c("apple", "banana", "cherry", "apple")
apple_indices=vector("logical")
for (apple_indices in words){
if (words=="apple"){
apple_indices<-c("apple",TRUE)}
else{
apple_indices<-c("apple",FALSE)}
}
words <- c("apple", "banana", "cherry", "apple")
# Find indices of all occurrences of "apple"
#apple_indices <- which(words == "apple")
#Non-consecutive indices
indice <- which(words == "apple")
print(indice)
#another method
words=c("apple", "banana", "cherry", "apple")
apple_indices=vector("logical")
for (apple_indices in words){
if (apple_indices =="apple"){
apple_indices<-c("apple",TRUE)}
else{
apple_indices<-c("apple",FALSE)}
}
print(words[apple_indices==TRUE])
words <- c("apple", "banana", "cherry", "apple")
# Find indices of all occurrences of "apple"
#apple_indices <- which(words == "apple")
#Non-consecutive indices
indice <- which(words == "apple")
print(indice)
#another method
words=c("apple", "banana", "cherry", "apple")
apple_indices=vector("logical")
for (apple_indices in words){
print(apple_indices)
if (apple_indices == "apple"){
apple_indices<-c("apple",TRUE)}
else{
apple_indices<-c("apple",FALSE)}
}
print(words[apple_indices==TRUE])
words <- c("apple", "banana", "cherry", "apple")
# Find indices of all occurrences of "apple"
#apple_indices <- which(words == "apple")
#Non-consecutive indices
indice <- which(words == "apple")
print(indice)
#another method
words=c("apple", "banana", "cherry", "apple")
apple_indices=vector("logical")
for (apple_indices in words){
#print(apple_indices)
if (apple_indices == "apple"){
print(apple_indices)
apple_indices<-c("apple",TRUE)}
else{
apple_indices<-c("apple",FALSE)}
}
print(words[apple_indices==TRUE])
words <- c("apple", "banana", "cherry", "apple")
# Find indices of all occurrences of "apple"
#apple_indices <- which(words == "apple")
#Non-consecutive indices
indice <- which(words == "apple")
print(indice)
#another method
words=c("apple", "banana", "cherry", "apple")
apple_indices=vector("logical")
for (apple_indices in words){
#print(apple_indices)
if (apple_indices == "apple"){
print(apple_indices)
apple_indices<-c("apple",TRUE)}
else{
}
}
print(words[apple_indices==TRUE])
words <- c("apple", "banana", "cherry", "apple")
# Find indices of all occurrences of "apple"
#apple_indices <- which(words == "apple")
#Non-consecutive indices
indice <- which(words == "apple")
print(indice)
#another method
words=c("apple", "banana", "cherry", "apple")
apple_indices=vector("logical")
for (apple_indices in words){
#print(apple_indices)
if (apple_indices == "apple"){
print(apple_indices)
apple_indices<-c("apple",TRUE)}
else{
apple_indices<-c("apple",FALSE)}
print("check", apple_indices)
}
words <- c("apple", "banana", "cherry", "apple")
# Find indices of all occurrences of "apple"
#apple_indices <- which(words == "apple")
#Non-consecutive indices
indice <- which(words == "apple")
print(indice)
#another method
words=c("apple", "banana", "cherry", "apple")
apple_indices=vector("logical")
for (apple_indices in words){
#print(apple_indices)
if (apple_indices == "apple"){
print(apple_indices)
apple_indices<-c("apple",TRUE)}
else{
apple_indices<-c("apple",FALSE)}
print("check" + apple_indices)
}
words <- c("apple", "banana", "cherry", "apple")
# Find indices of all occurrences of "apple"
#apple_indices <- which(words == "apple")
#Non-consecutive indices
indice <- which(words == "apple")
print(indice)
#another method
words=c("apple", "banana", "cherry", "apple")
apple_indices=vector("logical")
for (apple_indices in words){
#print(apple_indices)
if (apple_indices == "apple"){
print(apple_indices)
apple_indices<-c("apple",TRUE)}
else{
apple_indices<-c("apple",FALSE)}
print(apple_indices)
}
print(words[apple_indices==TRUE])
words <- c("apple", "banana", "cherry", "apple")
# Find indices of all occurrences of "apple"
#apple_indices <- which(words == "apple")
#Non-consecutive indices
indice <- which(words == "apple")
print(indice)
#another method
words=c("apple", "banana", "cherry", "apple")
apple_indices=vector("logical")
for (apple_indices in words){
#print(apple_indices)
if (apple_indices == "apple"){
print(apple_indices)
apple_indices<-c("apple",TRUE)}
else{
apple_indices<-c("apple",FALSE)}
print("---check")
print(apple_indices)
}
print(words[apple_indices==TRUE])
x <- c(10,15.5,"20")
# Check the type of x
typeof(x)
x <- c(10,15.5,"20",TRUE)
# Check the type of x
typeof(x)
x <- c(10,15.5,"20",TRUE)
# Check the type of x
typeof(x[1])
typeof(x[2])
typeof(x[3])
typeof(x[4])
x <- c(10,15.5,"20",TRUE)
# Check the type of x
typeof(x[[1]])
typeof(x[[2]])
typeof(x[[3]])
typeof(x[[4]])
data <- c(10, NA, 15, 20)
data[2]
# Check if the second element is NA
is_second_element_missing <- is.na(data[2])
# Print the result
print(is_second_element_missing)
# Create a vector
x <- c(10,15.5,"20",TRUE)
# Check the type of x
typeof(x[1])
typeof(x[[2]])
typeof(x[[3]])
typeof(x[[4]])
# Create a vector
x <- c(10L)
# Check the type of x
typeof(x)
# Add a character to the vector
x <- c(x,15.5)
# Check the type of x
typeof(x)
# Add a character to the vector
x <- c(x,"20")
# Check the type of x
typeof(x)
# Add a character to the vector
x <- c(TRUE)
# Check the type of x
typeof(x)
# Create a vector
x <- c(10,15.5,"20",TRUE)
# Check the type of x
typeof(x[1])
typeof(x[2])
typeof(x[3])
typeof(x[4])
# Create a vector
x <- c(10L)
# Check the type of x
typeof(x)
# Add a character to the vector
x <- c(x,15.5)
# Check the type of x
typeof(x)
# Add a character to the vector
x <- c(x,"20")
# Check the type of x
typeof(x)
# Add a character to the vector
x <- c(TRUE)
# Check the type of x
typeof(x)
